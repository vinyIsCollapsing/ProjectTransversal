
Nucleo_F746_USB_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f44  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800210c  0800210c  0001210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080023c4  080023c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080023c8  080023c8  000123c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000e4  20010000  080023cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .dtcmram      00000000  20000000  20000000  000200e4  2**0
                  CONTENTS
  7 .sram2        00000000  2004c000  2004c000  000200e4  2**0
                  CONTENTS
  8 .bss          000000c0  200100e4  200100e4  000200e4  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200101a4  200101a4  000200e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ae0  00000000  00000000  00020157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008dd  00000000  00000000  00022c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00023518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000015e  00000000  00000000  00023710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be8e  00000000  00000000  0002386e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000370e  00000000  00000000  0003f6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c211  00000000  00000000  00042e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00000608  00000000  00000000  000df01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  000df624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200100e4 	.word	0x200100e4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080020f4 	.word	0x080020f4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200100e8 	.word	0x200100e8
 8000204:	080020f4 	.word	0x080020f4

08000208 <main>:
// Local functions
static uint8_t SystemClock_Config(void);


int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0
	uint8_t 	status;
	uint32_t	n;

	uint8_t		msg_sent;

	uint8_t		msg[12] = "I am groot\r\n";
 800020e:	4a3a      	ldr	r2, [pc, #232]	; (80002f8 <main+0xf0>)
 8000210:	463b      	mov	r3, r7
 8000212:	ca07      	ldmia	r2, {r0, r1, r2}
 8000214:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	// Switch to HSE, 216MHz
	while(SystemCoreClock != 216000000)
 8000218:	e006      	b.n	8000228 <main+0x20>
	{
		status = SystemClock_Config();
 800021a:	f000 f87f 	bl	800031c <SystemClock_Config>
 800021e:	4603      	mov	r3, r0
 8000220:	75fb      	strb	r3, [r7, #23]
		delay_ms(10);
 8000222:	200a      	movs	r0, #10
 8000224:	f000 fc96 	bl	8000b54 <delay_ms>
	while(SystemCoreClock != 216000000)
 8000228:	4b34      	ldr	r3, [pc, #208]	; (80002fc <main+0xf4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a34      	ldr	r2, [pc, #208]	; (8000300 <main+0xf8>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d1f3      	bne.n	800021a <main+0x12>
	}

	// Initialize debug console
	BSP_Console_Init();
 8000232:	f000 fc3f 	bl	8000ab4 <BSP_Console_Init>
	my_printf("\n\n\rConsole Ready!\r\n");
 8000236:	4833      	ldr	r0, [pc, #204]	; (8000304 <main+0xfc>)
 8000238:	f000 fb0c 	bl	8000854 <my_printf>

	if (status == 0)
 800023c:	7dfb      	ldrb	r3, [r7, #23]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d109      	bne.n	8000256 <main+0x4e>
	{
		my_printf("System Clock Configuration succeeded\r\n");
 8000242:	4831      	ldr	r0, [pc, #196]	; (8000308 <main+0x100>)
 8000244:	f000 fb06 	bl	8000854 <my_printf>
		my_printf("SYSCLK = %d\r\n", SystemCoreClock);
 8000248:	4b2c      	ldr	r3, [pc, #176]	; (80002fc <main+0xf4>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4619      	mov	r1, r3
 800024e:	482f      	ldr	r0, [pc, #188]	; (800030c <main+0x104>)
 8000250:	f000 fb00 	bl	8000854 <my_printf>
 8000254:	e002      	b.n	800025c <main+0x54>
	}

	else my_printf("System Clock Configuration failed\r\n");
 8000256:	482e      	ldr	r0, [pc, #184]	; (8000310 <main+0x108>)
 8000258:	f000 fafc 	bl	8000854 <my_printf>

	// Initialize LEDS pins
	BSP_LED_Init();
 800025c:	f000 fb3e 	bl	80008dc <BSP_LED_Init>

	// LED test loop
	for(n=0; n<6; n++)
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
 8000264:	e014      	b.n	8000290 <main+0x88>
	{
		BSP_LED_Toggle(LEDN_GREEN);
 8000266:	2000      	movs	r0, #0
 8000268:	f000 fbbe 	bl	80009e8 <BSP_LED_Toggle>
		delay_ms(100);
 800026c:	2064      	movs	r0, #100	; 0x64
 800026e:	f000 fc71 	bl	8000b54 <delay_ms>
		BSP_LED_Toggle(LEDN_BLUE);
 8000272:	2001      	movs	r0, #1
 8000274:	f000 fbb8 	bl	80009e8 <BSP_LED_Toggle>
		delay_ms(100);
 8000278:	2064      	movs	r0, #100	; 0x64
 800027a:	f000 fc6b 	bl	8000b54 <delay_ms>
		BSP_LED_Toggle(LEDN_RED);
 800027e:	2002      	movs	r0, #2
 8000280:	f000 fbb2 	bl	80009e8 <BSP_LED_Toggle>
		delay_ms(100);
 8000284:	2064      	movs	r0, #100	; 0x64
 8000286:	f000 fc65 	bl	8000b54 <delay_ms>
	for(n=0; n<6; n++)
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	3301      	adds	r3, #1
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	2b05      	cmp	r3, #5
 8000294:	d9e7      	bls.n	8000266 <main+0x5e>
	}

	// Initialize User Push-Button
	BSP_PB_Init();
 8000296:	f000 fbd3 	bl	8000a40 <BSP_PB_Init>

	// Initialize and start USB Core
	BSP_USB_Core_Init();
 800029a:	f000 fd13 	bl	8000cc4 <BSP_USB_Core_Init>


	// Initialize control flags
	msg_sent = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]


	while(1)
	{
		// If a terminal is connected on the computer
		if (g_usb.cdc_ready)
 80002a2:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <main+0x10c>)
 80002a4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d021      	beq.n	80002f0 <main+0xe8>
		{
			BSP_LED_On(LEDN_BLUE);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f000 fb51 	bl	8000954 <BSP_LED_On>

			// Print a message into USB console upon user button pressing
			if (BSP_PB_GetState() == 1)
 80002b2:	f000 fbe7 	bl	8000a84 <BSP_PB_GetState>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d113      	bne.n	80002e4 <main+0xdc>
			{
				if (msg_sent == 0)
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1ef      	bne.n	80002a2 <main+0x9a>
				{
					BSP_LED_On(LEDN_GREEN);
 80002c2:	2000      	movs	r0, #0
 80002c4:	f000 fb46 	bl	8000954 <BSP_LED_On>
					BSP_USB_Send(msg, 12);
 80002c8:	463b      	mov	r3, r7
 80002ca:	210c      	movs	r1, #12
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fca3 	bl	8000c18 <BSP_USB_Send>

					my_printf("Sending -> I am groot\r\n");
 80002d2:	4811      	ldr	r0, [pc, #68]	; (8000318 <main+0x110>)
 80002d4:	f000 fabe 	bl	8000854 <my_printf>

					msg_sent = 1;
 80002d8:	2301      	movs	r3, #1
 80002da:	73fb      	strb	r3, [r7, #15]

					delay_ms(100);
 80002dc:	2064      	movs	r0, #100	; 0x64
 80002de:	f000 fc39 	bl	8000b54 <delay_ms>
 80002e2:	e7de      	b.n	80002a2 <main+0x9a>
				}
			}

			else
			{
				BSP_LED_Off(LEDN_GREEN);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 fb59 	bl	800099c <BSP_LED_Off>
				msg_sent = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	73fb      	strb	r3, [r7, #15]
 80002ee:	e7d8      	b.n	80002a2 <main+0x9a>
		}

		// If no terminal is available
		else
		{
			BSP_LED_Off(LEDN_BLUE);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 fb53 	bl	800099c <BSP_LED_Off>
		if (g_usb.cdc_ready)
 80002f6:	e7d4      	b.n	80002a2 <main+0x9a>
 80002f8:	08002194 	.word	0x08002194
 80002fc:	200100e0 	.word	0x200100e0
 8000300:	0cdfe600 	.word	0x0cdfe600
 8000304:	0800210c 	.word	0x0800210c
 8000308:	08002120 	.word	0x08002120
 800030c:	08002148 	.word	0x08002148
 8000310:	08002158 	.word	0x08002158
 8000314:	20010120 	.word	0x20010120
 8000318:	0800217c 	.word	0x0800217c

0800031c <SystemClock_Config>:
 * 	APB2								-> 108MHz (periph) 216MHz (timers)
 *
 */

static uint8_t SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	uint32_t	status;
	uint32_t	timeout;

	// Start HSE
	RCC->CR |= RCC_CR_HSEBYP;
 8000322:	4b61      	ldr	r3, [pc, #388]	; (80004a8 <SystemClock_Config+0x18c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a60      	ldr	r2, [pc, #384]	; (80004a8 <SystemClock_Config+0x18c>)
 8000328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800032c:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;
 800032e:	4b5e      	ldr	r3, [pc, #376]	; (80004a8 <SystemClock_Config+0x18c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a5d      	ldr	r2, [pc, #372]	; (80004a8 <SystemClock_Config+0x18c>)
 8000334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000338:	6013      	str	r3, [r2, #0]

	// Wait until HSE is ready
	timeout = 1000;
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	607b      	str	r3, [r7, #4]

	do
	{
		status = RCC->CR & RCC_CR_HSERDY;
 8000340:	4b59      	ldr	r3, [pc, #356]	; (80004a8 <SystemClock_Config+0x18c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000348:	603b      	str	r3, [r7, #0]
		timeout--;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3b01      	subs	r3, #1
 800034e:	607b      	str	r3, [r7, #4]
	} while ((status == 0) && (timeout > 0));
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d102      	bne.n	800035c <SystemClock_Config+0x40>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1f1      	bne.n	8000340 <SystemClock_Config+0x24>

	if (timeout == 0) return (1U);					// HSE error
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d101      	bne.n	8000366 <SystemClock_Config+0x4a>
 8000362:	2301      	movs	r3, #1
 8000364:	e09b      	b.n	800049e <SystemClock_Config+0x182>


	// Enable the power regulator scale mode 1
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000366:	4b50      	ldr	r3, [pc, #320]	; (80004a8 <SystemClock_Config+0x18c>)
 8000368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800036a:	4a4f      	ldr	r2, [pc, #316]	; (80004a8 <SystemClock_Config+0x18c>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000370:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR1 |= PWR_CR1_VOS;
 8000372:	4b4e      	ldr	r3, [pc, #312]	; (80004ac <SystemClock_Config+0x190>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a4d      	ldr	r2, [pc, #308]	; (80004ac <SystemClock_Config+0x190>)
 8000378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800037c:	6013      	str	r3, [r2, #0]
	#define PLL_M	8		// 8MHz HSE down-to 1MHz PLL input
	#define PLL_N	432		// 432 MHz VCO output
	#define PLL_P	2		// 216 MHz PLL output
	#define PLL_Q	9		// 48  MHz (USB)

	RCC->PLLCFGR = PLL_M | (PLL_N <<6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 800037e:	4b4a      	ldr	r3, [pc, #296]	; (80004a8 <SystemClock_Config+0x18c>)
 8000380:	4a4b      	ldr	r2, [pc, #300]	; (80004b0 <SystemClock_Config+0x194>)
 8000382:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8000384:	4b48      	ldr	r3, [pc, #288]	; (80004a8 <SystemClock_Config+0x18c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a47      	ldr	r2, [pc, #284]	; (80004a8 <SystemClock_Config+0x18c>)
 800038a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038e:	6013      	str	r3, [r2, #0]

	// Enter Over-drive power mode
	PWR->CR1 |= PWR_CR1_ODEN;
 8000390:	4b46      	ldr	r3, [pc, #280]	; (80004ac <SystemClock_Config+0x190>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a45      	ldr	r2, [pc, #276]	; (80004ac <SystemClock_Config+0x190>)
 8000396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800039a:	6013      	str	r3, [r2, #0]

	// Wait until OD is ready
	timeout = 1000;
 800039c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003a0:	607b      	str	r3, [r7, #4]

	do
	{
		status = PWR->CSR1 & PWR_CSR1_ODRDY;
 80003a2:	4b42      	ldr	r3, [pc, #264]	; (80004ac <SystemClock_Config+0x190>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003aa:	603b      	str	r3, [r7, #0]
		timeout--;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
	} while ((status == 0) && (timeout > 0));
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <SystemClock_Config+0xa2>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1f1      	bne.n	80003a2 <SystemClock_Config+0x86>

	if (timeout == 0) return (2U);					// PWR error
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d101      	bne.n	80003c8 <SystemClock_Config+0xac>
 80003c4:	2302      	movs	r3, #2
 80003c6:	e06a      	b.n	800049e <SystemClock_Config+0x182>

	// Switch to OD power supply
	PWR->CR1 |= PWR_CR1_ODSWEN;
 80003c8:	4b38      	ldr	r3, [pc, #224]	; (80004ac <SystemClock_Config+0x190>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a37      	ldr	r2, [pc, #220]	; (80004ac <SystemClock_Config+0x190>)
 80003ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d2:	6013      	str	r3, [r2, #0]

	// Wait until supply is switched
	timeout = 1000;
 80003d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d8:	607b      	str	r3, [r7, #4]

	do
	{
		status = PWR->CSR1 & PWR_CSR1_ODSWRDY;
 80003da:	4b34      	ldr	r3, [pc, #208]	; (80004ac <SystemClock_Config+0x190>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003e2:	603b      	str	r3, [r7, #0]
		timeout--;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	607b      	str	r3, [r7, #4]
	} while ((status == 0) && (timeout > 0));
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d102      	bne.n	80003f6 <SystemClock_Config+0xda>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1f1      	bne.n	80003da <SystemClock_Config+0xbe>

	if (timeout == 0) return (2U);					// PWR error
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d101      	bne.n	8000400 <SystemClock_Config+0xe4>
 80003fc:	2302      	movs	r3, #2
 80003fe:	e04e      	b.n	800049e <SystemClock_Config+0x182>


	// Configure Flash ART accelerator, prefetch and wait state (increase wait states at 216 MHz)
	FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_4WS;
 8000400:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <SystemClock_Config+0x198>)
 8000402:	f44f 7241 	mov.w	r2, #772	; 0x304
 8000406:	601a      	str	r2, [r3, #0]

	// Configure AHB/APB prescalers
	// AHB  Prescaler = /1	-> 216 MHz
	// APB1 Prescaler = /4  -> 54  MHz
	// APB2 Prescaler = /2  -> 108 MHz
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <SystemClock_Config+0x18c>)
 800040a:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <SystemClock_Config+0x18c>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <SystemClock_Config+0x18c>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	4a24      	ldr	r2, [pc, #144]	; (80004a8 <SystemClock_Config+0x18c>)
 8000416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800041a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <SystemClock_Config+0x18c>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <SystemClock_Config+0x18c>)
 8000422:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000426:	6093      	str	r3, [r2, #8]

	// Wait until PLL is ready
	timeout = 1000;
 8000428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042c:	607b      	str	r3, [r7, #4]

	do
	{
		status = RCC->CR & RCC_CR_PLLRDY;
 800042e:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <SystemClock_Config+0x18c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000436:	603b      	str	r3, [r7, #0]
		timeout--;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3b01      	subs	r3, #1
 800043c:	607b      	str	r3, [r7, #4]
	} while ((status == 0) && (timeout > 0));
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d102      	bne.n	800044a <SystemClock_Config+0x12e>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d1f1      	bne.n	800042e <SystemClock_Config+0x112>

	if (timeout == 0) return (3U);			// PLL error
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d101      	bne.n	8000454 <SystemClock_Config+0x138>
 8000450:	2303      	movs	r3, #3
 8000452:	e024      	b.n	800049e <SystemClock_Config+0x182>


	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <SystemClock_Config+0x18c>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <SystemClock_Config+0x18c>)
 800045a:	f023 0303 	bic.w	r3, r3, #3
 800045e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <SystemClock_Config+0x18c>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <SystemClock_Config+0x18c>)
 8000466:	f043 0302 	orr.w	r3, r3, #2
 800046a:	6093      	str	r3, [r2, #8]

	// Wait until PLL is switched on
	timeout = 1000;
 800046c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000470:	607b      	str	r3, [r7, #4]

	do
	{
		status = RCC->CFGR & RCC_CFGR_SWS;
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <SystemClock_Config+0x18c>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	f003 030c 	and.w	r3, r3, #12
 800047a:	603b      	str	r3, [r7, #0]
		timeout--;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3b01      	subs	r3, #1
 8000480:	607b      	str	r3, [r7, #4]
	} while ((status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	2b08      	cmp	r3, #8
 8000486:	d002      	beq.n	800048e <SystemClock_Config+0x172>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d1f1      	bne.n	8000472 <SystemClock_Config+0x156>

	if (timeout == 0) return (4U);			// SW error
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d101      	bne.n	8000498 <SystemClock_Config+0x17c>
 8000494:	2304      	movs	r3, #4
 8000496:	e002      	b.n	800049e <SystemClock_Config+0x182>

	// Update System core clock
	SystemCoreClockUpdate();
 8000498:	f001 fd88 	bl	8001fac <SystemCoreClockUpdate>
	return (0);
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40007000 	.word	0x40007000
 80004b0:	09406c08 	.word	0x09406c08
 80004b4:	40023c00 	.word	0x40023c00

080004b8 <printchar>:

#include <stdarg.h>
#include "stm32f7xx.h"

static void printchar(char **str, int c)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	if (str) {
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d00a      	beq.n	80004de <printchar+0x26>
		**str = c;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	b2d2      	uxtb	r2, r2
 80004d0:	701a      	strb	r2, [r3, #0]
		++(*str);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART3->TDR = c;
	}
}
 80004dc:	e009      	b.n	80004f2 <printchar+0x3a>
		while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 80004de:	bf00      	nop
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <printchar+0x48>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004e8:	2b40      	cmp	r3, #64	; 0x40
 80004ea:	d1f9      	bne.n	80004e0 <printchar+0x28>
		USART3->TDR = c;
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <printchar+0x48>)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40004800 	.word	0x40004800

08000504 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000508:	b084      	sub	sp, #16
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
 8000512:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000514:	2400      	movs	r4, #0
 8000516:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	dd17      	ble.n	8000550 <prints+0x4c>
		register int len = 0;
 8000520:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000522:	68be      	ldr	r6, [r7, #8]
 8000524:	e001      	b.n	800052a <prints+0x26>
 8000526:	3501      	adds	r5, #1
 8000528:	3601      	adds	r6, #1
 800052a:	7833      	ldrb	r3, [r6, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1fa      	bne.n	8000526 <prints+0x22>
		if (len >= width) width = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429d      	cmp	r5, r3
 8000534:	db02      	blt.n	800053c <prints+0x38>
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e002      	b.n	8000542 <prints+0x3e>
		else width -= len;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	1b5b      	subs	r3, r3, r5
 8000540:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	f003 0302 	and.w	r3, r3, #2
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <prints+0x4c>
 800054c:	f04f 0830 	mov.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	2b00      	cmp	r3, #0
 8000558:	d116      	bne.n	8000588 <prints+0x84>
		for ( ; width > 0; --width) {
 800055a:	e007      	b.n	800056c <prints+0x68>
			printchar (out, padchar);
 800055c:	4641      	mov	r1, r8
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	f7ff ffaa 	bl	80004b8 <printchar>
			++pc;
 8000564:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3b01      	subs	r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2b00      	cmp	r3, #0
 8000570:	dcf4      	bgt.n	800055c <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000572:	e009      	b.n	8000588 <prints+0x84>
		printchar (out, *string);
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	68f8      	ldr	r0, [r7, #12]
 800057c:	f7ff ff9c 	bl	80004b8 <printchar>
		++pc;
 8000580:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	3301      	adds	r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1f1      	bne.n	8000574 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8000590:	e007      	b.n	80005a2 <prints+0x9e>
		printchar (out, padchar);
 8000592:	4641      	mov	r1, r8
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f7ff ff8f 	bl	80004b8 <printchar>
		++pc;
 800059a:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3b01      	subs	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	dcf4      	bgt.n	8000592 <prints+0x8e>
	}

	return pc;
 80005a8:	4623      	mov	r3, r4
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080005b4 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80005b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005b8:	b089      	sub	sp, #36	; 0x24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80005c4:	f04f 0900 	mov.w	r9, #0
 80005c8:	2600      	movs	r6, #0
	register unsigned int u = i;
 80005ca:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10c      	bne.n	80005ec <printi+0x38>
		print_buf[0] = '0';
 80005d2:	2330      	movs	r3, #48	; 0x30
 80005d4:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 80005d6:	2300      	movs	r3, #0
 80005d8:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 80005da:	f107 0114 	add.w	r1, r7, #20
 80005de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f7ff ff8e 	bl	8000504 <prints>
 80005e8:	4603      	mov	r3, r0
 80005ea:	e04a      	b.n	8000682 <printi+0xce>
	}

	if (sg && b == 10 && i < 0) {
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00a      	beq.n	8000608 <printi+0x54>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0a      	cmp	r3, #10
 80005f6:	d107      	bne.n	8000608 <printi+0x54>
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	da04      	bge.n	8000608 <printi+0x54>
		neg = 1;
 80005fe:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	425b      	negs	r3, r3
 8000606:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000608:	f107 0414 	add.w	r4, r7, #20
 800060c:	340b      	adds	r4, #11
	*s = '\0';
 800060e:	2300      	movs	r3, #0
 8000610:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000612:	e015      	b.n	8000640 <printi+0x8c>
		t = u % b;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	fbb5 f2f3 	udiv	r2, r5, r3
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	1aeb      	subs	r3, r5, r3
 8000620:	4698      	mov	r8, r3
		if( t >= 10 )
 8000622:	f1b8 0f09 	cmp.w	r8, #9
 8000626:	dd02      	ble.n	800062e <printi+0x7a>
			t += letbase - '0' - 10;
 8000628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800062a:	3b3a      	subs	r3, #58	; 0x3a
 800062c:	4498      	add	r8, r3
		*--s = t + '0';
 800062e:	fa5f f388 	uxtb.w	r3, r8
 8000632:	3c01      	subs	r4, #1
 8000634:	3330      	adds	r3, #48	; 0x30
 8000636:	b2db      	uxtb	r3, r3
 8000638:	7023      	strb	r3, [r4, #0]
		u /= b;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000640:	2d00      	cmp	r5, #0
 8000642:	d1e7      	bne.n	8000614 <printi+0x60>
	}

	if (neg) {
 8000644:	f1b9 0f00 	cmp.w	r9, #0
 8000648:	d013      	beq.n	8000672 <printi+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 800064a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00d      	beq.n	800066c <printi+0xb8>
 8000650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	2b00      	cmp	r3, #0
 8000658:	d008      	beq.n	800066c <printi+0xb8>
			printchar (out, '-');
 800065a:	212d      	movs	r1, #45	; 0x2d
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f7ff ff2b 	bl	80004b8 <printchar>
			++pc;
 8000662:	3601      	adds	r6, #1
			--width;
 8000664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000666:	3b01      	subs	r3, #1
 8000668:	643b      	str	r3, [r7, #64]	; 0x40
 800066a:	e002      	b.n	8000672 <printi+0xbe>
		}
		else {
			*--s = '-';
 800066c:	3c01      	subs	r4, #1
 800066e:	232d      	movs	r3, #45	; 0x2d
 8000670:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8000672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000676:	4621      	mov	r1, r4
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f7ff ff43 	bl	8000504 <prints>
 800067e:	4603      	mov	r3, r0
 8000680:	4433      	add	r3, r6
}
 8000682:	4618      	mov	r0, r3
 8000684:	3724      	adds	r7, #36	; 0x24
 8000686:	46bd      	mov	sp, r7
 8000688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800068c <print>:

static int print(char **out, const char *format, va_list args )
{
 800068c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000690:	b08a      	sub	sp, #40	; 0x28
 8000692:	af04      	add	r7, sp, #16
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 800069a:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 800069c:	e0c4      	b.n	8000828 <print+0x19c>
		if (*format == '%') {
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b25      	cmp	r3, #37	; 0x25
 80006a4:	f040 80b3 	bne.w	800080e <print+0x182>
			++format;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80006ae:	2600      	movs	r6, #0
 80006b0:	4635      	mov	r5, r6
			if (*format == '\0') break;
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f000 80bc 	beq.w	8000834 <print+0x1a8>
			if (*format == '%') goto out;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b25      	cmp	r3, #37	; 0x25
 80006c2:	f000 80a6 	beq.w	8000812 <print+0x186>
			if (*format == '-') {
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b2d      	cmp	r3, #45	; 0x2d
 80006cc:	d109      	bne.n	80006e2 <print+0x56>
				++format;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80006d4:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80006d6:	e004      	b.n	80006e2 <print+0x56>
				++format;
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3301      	adds	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80006de:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b30      	cmp	r3, #48	; 0x30
 80006e8:	d0f6      	beq.n	80006d8 <print+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80006ea:	e00b      	b.n	8000704 <print+0x78>
				width *= 10;
 80006ec:	462b      	mov	r3, r5
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	442b      	add	r3, r5
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	461d      	mov	r5, r3
				width += *format - '0';
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3b30      	subs	r3, #48	; 0x30
 80006fc:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3301      	adds	r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b2f      	cmp	r3, #47	; 0x2f
 800070a:	d903      	bls.n	8000714 <print+0x88>
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b39      	cmp	r3, #57	; 0x39
 8000712:	d9eb      	bls.n	80006ec <print+0x60>
			}
			if( *format == 's' ) {
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b73      	cmp	r3, #115	; 0x73
 800071a:	d112      	bne.n	8000742 <print+0xb6>
				register char *s = (char *)va_arg( args, int );
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	1d1a      	adds	r2, r3, #4
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8000726:	f1b8 0f00 	cmp.w	r8, #0
 800072a:	d001      	beq.n	8000730 <print+0xa4>
 800072c:	4641      	mov	r1, r8
 800072e:	e000      	b.n	8000732 <print+0xa6>
 8000730:	4947      	ldr	r1, [pc, #284]	; (8000850 <print+0x1c4>)
 8000732:	4633      	mov	r3, r6
 8000734:	462a      	mov	r2, r5
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f7ff fee4 	bl	8000504 <prints>
 800073c:	4603      	mov	r3, r0
 800073e:	441c      	add	r4, r3
				continue;
 8000740:	e06f      	b.n	8000822 <print+0x196>
			}
			if( *format == 'd' ) {
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b64      	cmp	r3, #100	; 0x64
 8000748:	d10f      	bne.n	800076a <print+0xde>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1d1a      	adds	r2, r3, #4
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	6819      	ldr	r1, [r3, #0]
 8000752:	2361      	movs	r3, #97	; 0x61
 8000754:	9302      	str	r3, [sp, #8]
 8000756:	9601      	str	r6, [sp, #4]
 8000758:	9500      	str	r5, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	220a      	movs	r2, #10
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f7ff ff28 	bl	80005b4 <printi>
 8000764:	4603      	mov	r3, r0
 8000766:	441c      	add	r4, r3
				continue;
 8000768:	e05b      	b.n	8000822 <print+0x196>
			}
			if( *format == 'x' ) {
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b78      	cmp	r3, #120	; 0x78
 8000770:	d10f      	bne.n	8000792 <print+0x106>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1d1a      	adds	r2, r3, #4
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	6819      	ldr	r1, [r3, #0]
 800077a:	2361      	movs	r3, #97	; 0x61
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	9601      	str	r6, [sp, #4]
 8000780:	9500      	str	r5, [sp, #0]
 8000782:	2300      	movs	r3, #0
 8000784:	2210      	movs	r2, #16
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f7ff ff14 	bl	80005b4 <printi>
 800078c:	4603      	mov	r3, r0
 800078e:	441c      	add	r4, r3
				continue;
 8000790:	e047      	b.n	8000822 <print+0x196>
			}
			if( *format == 'X' ) {
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b58      	cmp	r3, #88	; 0x58
 8000798:	d10f      	bne.n	80007ba <print+0x12e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	1d1a      	adds	r2, r3, #4
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	6819      	ldr	r1, [r3, #0]
 80007a2:	2341      	movs	r3, #65	; 0x41
 80007a4:	9302      	str	r3, [sp, #8]
 80007a6:	9601      	str	r6, [sp, #4]
 80007a8:	9500      	str	r5, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2210      	movs	r2, #16
 80007ae:	68f8      	ldr	r0, [r7, #12]
 80007b0:	f7ff ff00 	bl	80005b4 <printi>
 80007b4:	4603      	mov	r3, r0
 80007b6:	441c      	add	r4, r3
				continue;
 80007b8:	e033      	b.n	8000822 <print+0x196>
			}
			if( *format == 'u' ) {
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b75      	cmp	r3, #117	; 0x75
 80007c0:	d10f      	bne.n	80007e2 <print+0x156>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	1d1a      	adds	r2, r3, #4
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	6819      	ldr	r1, [r3, #0]
 80007ca:	2361      	movs	r3, #97	; 0x61
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	9601      	str	r6, [sp, #4]
 80007d0:	9500      	str	r5, [sp, #0]
 80007d2:	2300      	movs	r3, #0
 80007d4:	220a      	movs	r2, #10
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f7ff feec 	bl	80005b4 <printi>
 80007dc:	4603      	mov	r3, r0
 80007de:	441c      	add	r4, r3
				continue;
 80007e0:	e01f      	b.n	8000822 <print+0x196>
			}
			if( *format == 'c' ) {
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b63      	cmp	r3, #99	; 0x63
 80007e8:	d11b      	bne.n	8000822 <print+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	1d1a      	adds	r2, r3, #4
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 80007f6:	2300      	movs	r3, #0
 80007f8:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 80007fa:	f107 0114 	add.w	r1, r7, #20
 80007fe:	4633      	mov	r3, r6
 8000800:	462a      	mov	r2, r5
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f7ff fe7e 	bl	8000504 <prints>
 8000808:	4603      	mov	r3, r0
 800080a:	441c      	add	r4, r3
				continue;
 800080c:	e009      	b.n	8000822 <print+0x196>
			}
		}
		else {
		out:
 800080e:	bf00      	nop
 8000810:	e000      	b.n	8000814 <print+0x188>
			if (*format == '%') goto out;
 8000812:	bf00      	nop
			printchar (out, *format);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f7ff fe4c 	bl	80004b8 <printchar>
			++pc;
 8000820:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	3301      	adds	r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	f47f af36 	bne.w	800069e <print+0x12>
 8000832:	e000      	b.n	8000836 <print+0x1aa>
			if (*format == '\0') break;
 8000834:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <print+0x1b8>
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000844:	4623      	mov	r3, r4
}
 8000846:	4618      	mov	r0, r3
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000850:	080021a0 	.word	0x080021a0

08000854 <my_printf>:

int my_printf(const char *format, ...)
{
 8000854:	b40f      	push	{r0, r1, r2, r3}
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	6939      	ldr	r1, [r7, #16]
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff ff10 	bl	800068c <print>
 800086c:	4603      	mov	r3, r0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000878:	b004      	add	sp, #16
 800087a:	4770      	bx	lr

0800087c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  // HAL_IncTick();
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <BSP_LED_Init>:
 *
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	// Start GPIOs Clocks
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <BSP_LED_Init+0x64>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <BSP_LED_Init+0x64>)
 80008e6:	f043 0302 	orr.w	r3, r3, #2
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PB0, PB7, PB14 as high-speed PP outputs with no pull resistors
	GPIOB->MODER &= ~(GPIO_MODER_MODER0_Msk | GPIO_MODER_MODER7_Msk | GPIO_MODER_MODER14_Msk);
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <BSP_LED_Init+0x68>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4914      	ldr	r1, [pc, #80]	; (8000944 <BSP_LED_Init+0x68>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <BSP_LED_Init+0x6c>)
 80008f4:	4013      	ands	r3, r2
 80008f6:	600b      	str	r3, [r1, #0]
	GPIOB->MODER   |= (1U <<GPIO_MODER_MODER0_Pos) | (1U <<GPIO_MODER_MODER7_Pos) | (1U <<GPIO_MODER_MODER14_Pos);
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <BSP_LED_Init+0x68>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4911      	ldr	r1, [pc, #68]	; (8000944 <BSP_LED_Init+0x68>)
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <BSP_LED_Init+0x70>)
 8000900:	4313      	orrs	r3, r2
 8000902:	600b      	str	r3, [r1, #0]
	GPIOB->OSPEEDR |= (3U <<GPIO_OSPEEDR_OSPEEDR0_Pos) | (3U <<GPIO_OSPEEDR_OSPEEDR7_Pos) | (3U <<GPIO_OSPEEDR_OSPEEDR14_Pos);
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <BSP_LED_Init+0x68>)
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	490e      	ldr	r1, [pc, #56]	; (8000944 <BSP_LED_Init+0x68>)
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <BSP_LED_Init+0x74>)
 800090c:	4313      	orrs	r3, r2
 800090e:	608b      	str	r3, [r1, #8]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR0_Msk | GPIO_PUPDR_PUPDR7_Msk | GPIO_PUPDR_PUPDR14_Msk);
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <BSP_LED_Init+0x68>)
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	490b      	ldr	r1, [pc, #44]	; (8000944 <BSP_LED_Init+0x68>)
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <BSP_LED_Init+0x6c>)
 8000918:	4013      	ands	r3, r2
 800091a:	60cb      	str	r3, [r1, #12]

	// Initial  state if off
	GPIOB->BSRR = GPIO_BSRR_BR0;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <BSP_LED_Init+0x68>)
 800091e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000922:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = GPIO_BSRR_BR7;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <BSP_LED_Init+0x68>)
 8000926:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800092a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = GPIO_BSRR_BR14;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <BSP_LED_Init+0x68>)
 800092e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000932:	619a      	str	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020400 	.word	0x40020400
 8000948:	cfff3ffc 	.word	0xcfff3ffc
 800094c:	10004001 	.word	0x10004001
 8000950:	3000c003 	.word	0x3000c003

08000954 <BSP_LED_On>:
 * BSP_LED_On()
 * Turn LED On
 */

void BSP_LED_On(uint8_t n)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	switch (n)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d00e      	beq.n	8000982 <BSP_LED_On+0x2e>
 8000964:	2b02      	cmp	r3, #2
 8000966:	dc11      	bgt.n	800098c <BSP_LED_On+0x38>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <BSP_LED_On+0x1e>
 800096c:	2b01      	cmp	r3, #1
 800096e:	d004      	beq.n	800097a <BSP_LED_On+0x26>
		{
			GPIOB->BSRR = GPIO_BSRR_BS14;
			break;
		}
	}
}
 8000970:	e00c      	b.n	800098c <BSP_LED_On+0x38>
			GPIOB->BSRR = GPIO_BSRR_BS0;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <BSP_LED_On+0x44>)
 8000974:	2201      	movs	r2, #1
 8000976:	619a      	str	r2, [r3, #24]
			break;
 8000978:	e008      	b.n	800098c <BSP_LED_On+0x38>
			GPIOB->BSRR = GPIO_BSRR_BS7;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <BSP_LED_On+0x44>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	619a      	str	r2, [r3, #24]
			break;
 8000980:	e004      	b.n	800098c <BSP_LED_On+0x38>
			GPIOB->BSRR = GPIO_BSRR_BS14;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <BSP_LED_On+0x44>)
 8000984:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000988:	619a      	str	r2, [r3, #24]
			break;
 800098a:	bf00      	nop
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40020400 	.word	0x40020400

0800099c <BSP_LED_Off>:
 * BSP_LED_Off()
 * Turn LED Off
 */

void BSP_LED_Off(uint8_t n)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	switch (n)
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d010      	beq.n	80009ce <BSP_LED_Off+0x32>
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	dc13      	bgt.n	80009d8 <BSP_LED_Off+0x3c>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <BSP_LED_Off+0x1e>
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d005      	beq.n	80009c4 <BSP_LED_Off+0x28>
		{
			GPIOB->BSRR = GPIO_BSRR_BR14;
			break;
		}
	}
}
 80009b8:	e00e      	b.n	80009d8 <BSP_LED_Off+0x3c>
			GPIOB->BSRR = GPIO_BSRR_BR0;
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <BSP_LED_Off+0x48>)
 80009bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009c0:	619a      	str	r2, [r3, #24]
			break;
 80009c2:	e009      	b.n	80009d8 <BSP_LED_Off+0x3c>
			GPIOB->BSRR = GPIO_BSRR_BR7;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <BSP_LED_Off+0x48>)
 80009c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009ca:	619a      	str	r2, [r3, #24]
			break;
 80009cc:	e004      	b.n	80009d8 <BSP_LED_Off+0x3c>
			GPIOB->BSRR = GPIO_BSRR_BR14;
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <BSP_LED_Off+0x48>)
 80009d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d4:	619a      	str	r2, [r3, #24]
			break;
 80009d6:	bf00      	nop
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40020400 	.word	0x40020400

080009e8 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED
 */

void BSP_LED_Toggle(uint8_t n)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	switch (n)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d014      	beq.n	8000a22 <BSP_LED_Toggle+0x3a>
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	dc19      	bgt.n	8000a30 <BSP_LED_Toggle+0x48>
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <BSP_LED_Toggle+0x1e>
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d007      	beq.n	8000a14 <BSP_LED_Toggle+0x2c>
		{
			GPIOB->ODR ^= GPIO_ODR_ODR_14;
			break;
		}
	}
}
 8000a04:	e014      	b.n	8000a30 <BSP_LED_Toggle+0x48>
			GPIOB->ODR ^= GPIO_ODR_ODR_0;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <BSP_LED_Toggle+0x54>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <BSP_LED_Toggle+0x54>)
 8000a0c:	f083 0301 	eor.w	r3, r3, #1
 8000a10:	6153      	str	r3, [r2, #20]
			break;
 8000a12:	e00d      	b.n	8000a30 <BSP_LED_Toggle+0x48>
			GPIOB->ODR ^= GPIO_ODR_ODR_7;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <BSP_LED_Toggle+0x54>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <BSP_LED_Toggle+0x54>)
 8000a1a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000a1e:	6153      	str	r3, [r2, #20]
			break;
 8000a20:	e006      	b.n	8000a30 <BSP_LED_Toggle+0x48>
			GPIOB->ODR ^= GPIO_ODR_ODR_14;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <BSP_LED_Toggle+0x54>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <BSP_LED_Toggle+0x54>)
 8000a28:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000a2c:	6153      	str	r3, [r2, #20]
			break;
 8000a2e:	bf00      	nop
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40020400 	.word	0x40020400

08000a40 <BSP_PB_Init>:
 * BSP_PB_Init()
 * Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 */

void BSP_PB_Init()
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <BSP_PB_Init+0x3c>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <BSP_PB_Init+0x3c>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <BSP_PB_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <BSP_PB_Init+0x40>)
 8000a56:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000a5a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <BSP_PB_Init+0x40>)
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <BSP_PB_Init+0x40>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6013      	str	r3, [r2, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <BSP_PB_Init+0x40>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <BSP_PB_Init+0x40>)
 8000a6a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020800 	.word	0x40020800

08000a84 <BSP_PB_GetState>:
 * BSP_PB_GetState()
 * Returns the state of the button (0=released, 1=pressed)
 */

uint8_t	BSP_PB_GetState()
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
	uint8_t state;

	if ((GPIOC->IDR & GPIO_IDR_IDR_13) == GPIO_IDR_IDR_13)
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <BSP_PB_GetState+0x2c>)
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a96:	d102      	bne.n	8000a9e <BSP_PB_GetState+0x1a>
	{
		state = 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	e001      	b.n	8000aa2 <BSP_PB_GetState+0x1e>
	}
	else
	{
		state = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	}

	return state;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <BSP_Console_Init>:
 * TX -> PD8 (AF7)
 * RX -> PD9 (AF7)
 */

void BSP_Console_Init()
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	// Enable GPIOD clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <BSP_Console_Init+0x94>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <BSP_Console_Init+0x94>)
 8000abe:	f043 0308 	orr.w	r3, r3, #8
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PD8, PD9 as AF mode
	GPIOD->MODER &= ~(GPIO_MODER_MODER8_Msk | GPIO_MODER_MODER9_Msk);
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <BSP_Console_Init+0x98>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <BSP_Console_Init+0x98>)
 8000aca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000ace:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=  (0x02 <<GPIO_MODER_MODER8_Pos) | (0x02 <<GPIO_MODER_MODER9_Pos);
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <BSP_Console_Init+0x98>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <BSP_Console_Init+0x98>)
 8000ad6:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000ada:	6013      	str	r3, [r2, #0]

	// Connect to USART3 TX (AF7)
	GPIOD->AFR[1] &= ~(0x000000FF);
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <BSP_Console_Init+0x98>)
 8000ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <BSP_Console_Init+0x98>)
 8000ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ae6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |=   0x00000077;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <BSP_Console_Init+0x98>)
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <BSP_Console_Init+0x98>)
 8000aee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000af2:	6253      	str	r3, [r2, #36]	; 0x24

	// Enable USART3 Clock
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <BSP_Console_Init+0x94>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <BSP_Console_Init+0x94>)
 8000afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40

	// Disable USART3 and clears CR1 register
	// Default is 1S|8B|1S, no parity
	USART3->CR1 = 0x00000000;
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
	USART3->CR2 = 0x00000000;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
	USART3->CR3 = 0x00000000;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]

	// Enable Receiver and Transmitter mode
	USART3->CR1 |= USART_CR1_RE | USART_CR1_TE;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b18:	f043 030c 	orr.w	r3, r3, #12
 8000b1c:	6013      	str	r3, [r2, #0]

	// Baudrate = 115200
	USART3->CR1 &= ~USART_CR1_OVER8;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b28:	6013      	str	r3, [r2, #0]
	USART3->BRR = 0x1D4;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b2c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000b30:	60da      	str	r2, [r3, #12]

	// Enable USART3
	USART3->CR1 |= USART_CR1_UE;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <BSP_Console_Init+0x9c>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6013      	str	r3, [r2, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40004800 	.word	0x40004800

08000b54 <delay_ms>:
/*
 *  Basic delay functions
 */

void delay_ms(uint32_t delay)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	uint32_t	i;
	for(i=0; i<(delay*8500); i++);		// Tuned for ms @ 216MHz
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	e002      	b.n	8000b68 <delay_ms+0x14>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f242 1234 	movw	r2, #8500	; 0x2134
 8000b6e:	fb02 f303 	mul.w	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d3f4      	bcc.n	8000b62 <delay_ms+0xe>
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0b      	blt.n	8000bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 021f 	and.w	r2, r3, #31
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <__NVIC_EnableIRQ+0x38>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	2001      	movs	r0, #1
 8000baa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <BSP_USB_Send>:
/*
 * USB Send function
 */

void BSP_USB_Send(uint8_t *msg, uint8_t length)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
	uint8_t i;

	// Copy message into g_usb TX buffer
	for (i=0; i<length; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e00c      	b.n	8000c44 <BSP_USB_Send+0x2c>
	{
		g_usb.tx_buffer[i] = msg[i];
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	441a      	add	r2, r3
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	7811      	ldrb	r1, [r2, #0]
 8000c34:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <BSP_USB_Send+0x98>)
 8000c36:	4413      	add	r3, r2
 8000c38:	460a      	mov	r2, r1
 8000c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	for (i=0; i<length; i++)
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	3301      	adds	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	7bfa      	ldrb	r2, [r7, #15]
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3ee      	bcc.n	8000c2a <BSP_USB_Send+0x12>
	}

	// Set number of bytes to transmit
	g_usb.tx_nbytes = length;
 8000c4c:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <BSP_USB_Send+0x98>)
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	f882 3081 	strb.w	r3, [r2, #129]	; 0x81

	// Setup IN EP1 for transmission
    USB_OTG_FS_INEP(1)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);		// 1 packet
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	4916      	ldr	r1, [pc, #88]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <BSP_USB_Send+0xa0>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	610b      	str	r3, [r1, #16]
    USB_OTG_FS_INEP(1)->DIEPTSIZ |= 1U <<19U;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c6a:	6113      	str	r3, [r2, #16]

    USB_OTG_FS_INEP(1)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);		// nbytes
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	4910      	ldr	r1, [pc, #64]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <BSP_USB_Send+0xa4>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	610b      	str	r3, [r1, #16]
    USB_OTG_FS_INEP(1)->DIEPTSIZ |= USB_OTG_DIEPTSIZ_XFRSIZ & g_usb.tx_nbytes;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <BSP_USB_Send+0x98>)
 8000c7e:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6113      	str	r3, [r2, #16]

    // Enable device IN EP FIFO empty (TXFE) interrupt -> This is done to wait for available space in the TX FIFO
    USB_OTG_FS_DEVICE->DIEPEMPMSK |= 1U <<1U;	// Enable IN EP1 TXFE interrupts
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <BSP_USB_Send+0xa8>)
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <BSP_USB_Send+0xa8>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6353      	str	r3, [r2, #52]	; 0x34

    // Enable IN EP1 (automatically disabled after previous transfer completed)
    USB_OTG_FS_INEP(1)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <BSP_USB_Send+0x9c>)
 8000c9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8000ca0:	6013      	str	r3, [r2, #0]
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20010120 	.word	0x20010120
 8000cb4:	50000920 	.word	0x50000920
 8000cb8:	e007ffff 	.word	0xe007ffff
 8000cbc:	fff80000 	.word	0xfff80000
 8000cc0:	50000800 	.word	0x50000800

08000cc4 <BSP_USB_Core_Init>:

/*
 * USB Core initialization for Device Mode
 */
void BSP_USB_Core_Init()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	// PA9		-> USB_OTG_FS_VBUS

	uint32_t	i;

	// Enable GPIOA clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000cca:	4b92      	ldr	r3, [pc, #584]	; (8000f14 <BSP_USB_Core_Init+0x250>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a91      	ldr	r2, [pc, #580]	; (8000f14 <BSP_USB_Core_Init+0x250>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA8, PA10, PA11, PA12 as AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER10 | GPIO_MODER_MODER11 | GPIO_MODER_MODER12);
 8000cd6:	4b90      	ldr	r3, [pc, #576]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	498f      	ldr	r1, [pc, #572]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000cdc:	4b8f      	ldr	r3, [pc, #572]	; (8000f1c <BSP_USB_Core_Init+0x258>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |=  (0x02 <<16U) | (0x02 <<20U) | (0x02 <<22U) | (0x02 <<24U);
 8000ce2:	4b8d      	ldr	r3, [pc, #564]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	498c      	ldr	r1, [pc, #560]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000ce8:	4b8d      	ldr	r3, [pc, #564]	; (8000f20 <BSP_USB_Core_Init+0x25c>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]

	// Set to push-pull outputs
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT8_Msk | GPIO_OTYPER_OT10_Msk | GPIO_OTYPER_OT11_Msk | GPIO_OTYPER_OT12_Msk);
 8000cee:	4b8a      	ldr	r3, [pc, #552]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a89      	ldr	r2, [pc, #548]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000cf4:	f423 53e8 	bic.w	r3, r3, #7424	; 0x1d00
 8000cf8:	6053      	str	r3, [r2, #4]

	// Set to very high speed
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR8 | GPIO_OSPEEDER_OSPEEDR10 | GPIO_OSPEEDER_OSPEEDR11 | GPIO_OSPEEDER_OSPEEDR12);
 8000cfa:	4b87      	ldr	r3, [pc, #540]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	4986      	ldr	r1, [pc, #536]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d00:	4b86      	ldr	r3, [pc, #536]	; (8000f1c <BSP_USB_Core_Init+0x258>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=  (0x03 <<16U) | (0x03 <<20U) | (0x03 <<22U) | (0x03 <<24U);
 8000d06:	4b84      	ldr	r3, [pc, #528]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	4983      	ldr	r1, [pc, #524]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d0c:	4b85      	ldr	r3, [pc, #532]	; (8000f24 <BSP_USB_Core_Init+0x260>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	608b      	str	r3, [r1, #8]

	// No pull resistors
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR8_Msk | GPIO_PUPDR_PUPDR10_Msk | GPIO_PUPDR_PUPDR11_Msk | GPIO_PUPDR_PUPDR12_Msk);
 8000d12:	4b81      	ldr	r3, [pc, #516]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	4980      	ldr	r1, [pc, #512]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d18:	4b80      	ldr	r3, [pc, #512]	; (8000f1c <BSP_USB_Core_Init+0x258>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60cb      	str	r3, [r1, #12]

	// Connect to USB_OTG_FS (AF10)
	GPIOA->AFR[1] &= ~(0x000FFF0F);
 8000d1e:	4b7e      	ldr	r3, [pc, #504]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d22:	497d      	ldr	r1, [pc, #500]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d24:	4b80      	ldr	r3, [pc, #512]	; (8000f28 <BSP_USB_Core_Init+0x264>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	624b      	str	r3, [r1, #36]	; 0x24
	GPIOA->AFR[1] |=   0x000AAA0A;
 8000d2a:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d2e:	497a      	ldr	r1, [pc, #488]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d30:	4b7e      	ldr	r3, [pc, #504]	; (8000f2c <BSP_USB_Core_Init+0x268>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	624b      	str	r3, [r1, #36]	; 0x24

	// Configure PA9 as input
	GPIOA->MODER &= ~(GPIO_MODER_MODER9);
 8000d36:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a77      	ldr	r2, [pc, #476]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d3c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000d40:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x00 <<18U);
 8000d42:	4b75      	ldr	r3, [pc, #468]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d44:	4a74      	ldr	r2, [pc, #464]	; (8000f18 <BSP_USB_Core_Init+0x254>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6013      	str	r3, [r2, #0]


	// USB Global Core Configuration

	// Start USB_OTG_FS clock
	RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN;
 8000d4a:	4b72      	ldr	r3, [pc, #456]	; (8000f14 <BSP_USB_Core_Init+0x250>)
 8000d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4e:	4a71      	ldr	r2, [pc, #452]	; (8000f14 <BSP_USB_Core_Init+0x250>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	6353      	str	r3, [r2, #52]	; 0x34

	// Global AHB USB Configuration
	// - Global USB interrupts are disabled
	// - TXFE signals that TX FIFO is completely empty
	USB_OTG_FS->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8000d56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	6093      	str	r3, [r2, #8]
	USB_OTG_FS->GAHBCFG |=  USB_OTG_GAHBCFG_TXFELVL;
 8000d66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	6093      	str	r3, [r2, #8]

	// NVIC enable USB_OTG_FS interrupts
	NVIC_SetPriority(OTG_FS_IRQn, 1);
 8000d76:	2101      	movs	r1, #1
 8000d78:	2043      	movs	r0, #67	; 0x43
 8000d7a:	f7ff ff23 	bl	8000bc4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(OTG_FS_IRQn);
 8000d7e:	2043      	movs	r0, #67	; 0x43
 8000d80:	f7ff ff02 	bl	8000b88 <__NVIC_EnableIRQ>

	// Select internal PHY interface layer (actually always set)
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8000d84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d92:	60d3      	str	r3, [r2, #12]

	// Wait for AHB master state machine to be in IDLE state
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8000d94:	bf00      	nop
 8000d96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dafa      	bge.n	8000d96 <BSP_USB_Core_Init+0xd2>

	// Core soft reset
	USB_OTG_FS->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8000da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6113      	str	r3, [r2, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8000db0:	bf00      	nop
 8000db2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d0f8      	beq.n	8000db2 <BSP_USB_Core_Init+0xee>

	// Wait (again) for AHB master state machine to be in IDLE state
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8000dc0:	bf00      	nop
 8000dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	dafa      	bge.n	8000dc2 <BSP_USB_Core_Init+0xfe>

	// Deactivate power down (i.e. transceiver becomes active)
	USB_OTG_FS->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8000dcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dd4:	639a      	str	r2, [r3, #56]	; 0x38

	// Force DEVICE mode (no matter what the ID input pin is)
	USB_OTG_FS->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8000dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000de0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8000de4:	60d3      	str	r3, [r2, #12]
	USB_OTG_FS->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8000de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000df0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000df4:	60d3      	str	r3, [r2, #12]

	delay_ms(50);
 8000df6:	2032      	movs	r0, #50	; 0x32
 8000df8:	f7ff feac 	bl	8000b54 <delay_ms>

	// Deactivate VBUS Sensing B
    // USB_OTG_FS->GCCFG &= ~ USB_OTG_GCCFG_VBUSBSEN;

    // Activate VBUS Sensing B
    USB_OTG_FS->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8000dfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0a:	6393      	str	r3, [r2, #56]	; 0x38

    // Restart the Phy Clock
    *(__IO uint32_t *)((uint32_t)USB_OTG_FS + USB_OTG_PCGCCTL_BASE) = 0U;
 8000e0c:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <BSP_USB_Core_Init+0x26c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]


	// USB DEVICE mode configuration

	// Set periodic frame interval to 80%
	USB_OTG_FS_DEVICE->DCFG &= ~(USB_OTG_DCFG_PFIVL_Msk);
 8000e12:	4b48      	ldr	r3, [pc, #288]	; (8000f34 <BSP_USB_Core_Init+0x270>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a47      	ldr	r2, [pc, #284]	; (8000f34 <BSP_USB_Core_Init+0x270>)
 8000e18:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e1c:	6013      	str	r3, [r2, #0]
	USB_OTG_FS_DEVICE->DCFG |= 0x00 <<USB_OTG_DCFG_PFIVL_Pos;
 8000e1e:	4b45      	ldr	r3, [pc, #276]	; (8000f34 <BSP_USB_Core_Init+0x270>)
 8000e20:	4a44      	ldr	r2, [pc, #272]	; (8000f34 <BSP_USB_Core_Init+0x270>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6013      	str	r3, [r2, #0]

	// Set to full speed
	USB_OTG_FS_DEVICE->DCFG |= 0x03 <<USB_OTG_DCFG_DSPD_Pos;
 8000e26:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <BSP_USB_Core_Init+0x270>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a42      	ldr	r2, [pc, #264]	; (8000f34 <BSP_USB_Core_Init+0x270>)
 8000e2c:	f043 0303 	orr.w	r3, r3, #3
 8000e30:	6013      	str	r3, [r2, #0]

	// Flush all TX FIFOs
	USB_OTG_FS->GRSTCTL = USB_OTG_GRSTCTL_TXFFLSH | (0x10 <<USB_OTG_GRSTCTL_TXFNUM_Pos);
 8000e32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e36:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8000e3a:	611a      	str	r2, [r3, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8000e3c:	bf00      	nop
 8000e3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	2b20      	cmp	r3, #32
 8000e4a:	d0f8      	beq.n	8000e3e <BSP_USB_Core_Init+0x17a>

	// Flush RX FIFO
	USB_OTG_FS->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8000e4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e50:	2210      	movs	r2, #16
 8000e52:	611a      	str	r2, [r3, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8000e54:	bf00      	nop
 8000e56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	2b10      	cmp	r3, #16
 8000e62:	d0f8      	beq.n	8000e56 <BSP_USB_Core_Init+0x192>

	// Mask all IN EP interrupts
	USB_OTG_FS_DEVICE->DIEPMSK 	= 0x00000000U;
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <BSP_USB_Core_Init+0x270>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]

	// Mask all OUT EP interrupts
	USB_OTG_FS_DEVICE->DOEPMSK 	= 0x00000000U;
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <BSP_USB_Core_Init+0x270>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]

	// Mask all EP interrupts
	USB_OTG_FS_DEVICE->DAINTMSK = 0x00000000U;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <BSP_USB_Core_Init+0x270>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]


	// For all IN EP (0, 1..5)
	for (i=0; i<6; i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	e031      	b.n	8000ee0 <BSP_USB_Core_Init+0x21c>
	{
		// If the EP is currently enabled
	    if ((USB_OTG_FS_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <BSP_USB_Core_Init+0x274>)
 8000e80:	4413      	add	r3, r2
 8000e82:	015b      	lsls	r3, r3, #5
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e8e:	d108      	bne.n	8000ea2 <BSP_USB_Core_Init+0x1de>
	    {
	    	// Disable the EP and set NAK
	    	USB_OTG_FS_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <BSP_USB_Core_Init+0x274>)
 8000e94:	4413      	add	r3, r2
 8000e96:	015b      	lsls	r3, r3, #5
 8000e98:	461a      	mov	r2, r3
 8000e9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e006      	b.n	8000eb0 <BSP_USB_Core_Init+0x1ec>
	    }
	    else
	    {
	    	// Reset EP control register
	    	USB_OTG_FS_INEP(i)->DIEPCTL = 0x00000000U;
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <BSP_USB_Core_Init+0x274>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	015b      	lsls	r3, r3, #5
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2300      	movs	r3, #0
 8000eae:	6013      	str	r3, [r2, #0]
	    }

	    // Set IN EP size to zero
	    USB_OTG_FS_INEP(i)->DIEPTSIZ = 0x00000000U;
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <BSP_USB_Core_Init+0x274>)
 8000eb4:	4413      	add	r3, r2
 8000eb6:	015b      	lsls	r3, r3, #5
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2300      	movs	r3, #0
 8000ebc:	6113      	str	r3, [r2, #16]

	    // Clear ALL IN EP interrupts flags
	    USB_OTG_FS_INEP(i)->DIEPINT |=  0x0000287BU;
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <BSP_USB_Core_Init+0x274>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	015b      	lsls	r3, r3, #5
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <BSP_USB_Core_Init+0x274>)
 8000ecc:	440b      	add	r3, r1
 8000ece:	015b      	lsls	r3, r3, #5
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f642 037b 	movw	r3, #10363	; 0x287b
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	608b      	str	r3, [r1, #8]
	for (i=0; i<6; i++)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3301      	adds	r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	d9ca      	bls.n	8000e7c <BSP_USB_Core_Init+0x1b8>
	}

	// For all OUT EP (0, 1..5)
	for (i=0; i<6; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	e048      	b.n	8000f7e <BSP_USB_Core_Init+0x2ba>
	{
		// If the EP is currently enabled
		if ((USB_OTG_FS_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)	// Passe dans le else 4 fois
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <BSP_USB_Core_Init+0x278>)
 8000ef0:	4413      	add	r3, r2
 8000ef2:	015b      	lsls	r3, r3, #5
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000efe:	d11f      	bne.n	8000f40 <BSP_USB_Core_Init+0x27c>
		{
			// Disable the EP and set NAK
			USB_OTG_FS_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <BSP_USB_Core_Init+0x278>)
 8000f04:	4413      	add	r3, r2
 8000f06:	015b      	lsls	r3, r3, #5
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e01d      	b.n	8000f4e <BSP_USB_Core_Init+0x28a>
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	fc0cffff 	.word	0xfc0cffff
 8000f20:	02a20000 	.word	0x02a20000
 8000f24:	03f30000 	.word	0x03f30000
 8000f28:	fff000f0 	.word	0xfff000f0
 8000f2c:	000aaa0a 	.word	0x000aaa0a
 8000f30:	50000e00 	.word	0x50000e00
 8000f34:	50000800 	.word	0x50000800
 8000f38:	02800048 	.word	0x02800048
 8000f3c:	02800058 	.word	0x02800058
	    }
	    else
	    {
	    	// Reset EP control register
	    	USB_OTG_FS_OUTEP(i)->DOEPCTL = 0x00000000U;
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <BSP_USB_Core_Init+0x384>)
 8000f44:	4413      	add	r3, r2
 8000f46:	015b      	lsls	r3, r3, #5
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	6013      	str	r3, [r2, #0]
	    }

		// Set OUT EP size to zero
		USB_OTG_FS_OUTEP(i)->DOEPTSIZ = 0x00000000U;
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <BSP_USB_Core_Init+0x384>)
 8000f52:	4413      	add	r3, r2
 8000f54:	015b      	lsls	r3, r3, #5
 8000f56:	461a      	mov	r2, r3
 8000f58:	2300      	movs	r3, #0
 8000f5a:	6113      	str	r3, [r2, #16]

		 // Clear ALL OUT EP interrupt flags
		USB_OTG_FS_OUTEP(i)->DOEPINT  |= 0x0000313BU;
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <BSP_USB_Core_Init+0x384>)
 8000f60:	4413      	add	r3, r2
 8000f62:	015b      	lsls	r3, r3, #5
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <BSP_USB_Core_Init+0x384>)
 8000f6a:	440b      	add	r3, r1
 8000f6c:	015b      	lsls	r3, r3, #5
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f243 133b 	movw	r3, #12603	; 0x313b
 8000f74:	4313      	orrs	r3, r2
 8000f76:	608b      	str	r3, [r1, #8]
	for (i=0; i<6; i++)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	d9b3      	bls.n	8000eec <BSP_USB_Core_Init+0x228>
	}

	// Disable all interrupts
	USB_OTG_FS->GINTMSK = 0x00000000U;
 8000f84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]

	// Clear ALL pending interrupts
	USB_OTG_FS->GINTSTS |= 0xF030FC0AU;
 8000f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <BSP_USB_Core_Init+0x388>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	614b      	str	r3, [r1, #20]

	// Enable the common interrupts
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8000f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6193      	str	r3, [r2, #24]

	// Enable interrupts matching to the Device mode ONLY
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM;				// USB SUSPEND event
 8000fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fba:	6193      	str	r3, [r2, #24]
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBRST;					// USB RESET event
 8000fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fca:	6193      	str	r3, [r2, #24]
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_ENUMDNEM;				// USB ENUMERATION done event
 8000fcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fda:	6193      	str	r3, [r2, #24]
	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_IEPINT;					// IN EP event
 8000fdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fea:	6193      	str	r3, [r2, #24]

	// Soft-Disconnect USB device by disabling pull-up/pull-down
	USB_OTG_FS_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <BSP_USB_Core_Init+0x38c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <BSP_USB_Core_Init+0x38c>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	6053      	str	r3, [r2, #4]
	delay_ms(10);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f7ff fdab 	bl	8000b54 <delay_ms>

	// Set RX FIFO size to 0x80 = 128 words = 512 bytes
	USB_OTG_FS->GRXFSIZ = (uint32_t)0x80;
 8000ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	625a      	str	r2, [r3, #36]	; 0x24

	// Set TX FIFO for IN EP0 to 0x40 = 64 words = 256 bytes
	USB_OTG_FS->DIEPTXF0_HNPTXFSIZ = ( (uint32_t)0x40 <<16U | 0x80);
 8001006:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <BSP_USB_Core_Init+0x390>)
 800100c:	629a      	str	r2, [r3, #40]	; 0x28

	// Set TX FIFO for IN EP1 to 0x80 = 128 words = 512 bytes				--> Total = 512 + 256 + 512 = 1280 bytes = 1,25kB
	USB_OTG_FS->DIEPTXF[0] = ((uint32_t)0x80 <<16U | (0x80 + 0x40) );
 800100e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <BSP_USB_Core_Init+0x394>)
 8001014:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	// Soft-Connect USB device by enabling pull-up/pull-down
	USB_OTG_FS_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <BSP_USB_Core_Init+0x38c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <BSP_USB_Core_Init+0x38c>)
 800101e:	f023 0302 	bic.w	r3, r3, #2
 8001022:	6053      	str	r3, [r2, #4]
	delay_ms(10);
 8001024:	200a      	movs	r0, #10
 8001026:	f7ff fd95 	bl	8000b54 <delay_ms>

	// Enable global interrupts
	USB_OTG_FS->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800102a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6093      	str	r3, [r2, #8]

	// Perform Reset initializations
	USB_Reset_Event_Handler();
 800103a:	f000 fb39 	bl	80016b0 <USB_Reset_Event_Handler>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	02800058 	.word	0x02800058
 800104c:	f030fc0a 	.word	0xf030fc0a
 8001050:	50000800 	.word	0x50000800
 8001054:	00400080 	.word	0x00400080
 8001058:	008000c0 	.word	0x008000c0

0800105c <OTG_FS_IRQHandler>:
 *                                                                    *
 **********************************************************************
 */

void OTG_FS_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	uint32_t 		*p_fifo;
	uint16_t		i, k;


	// Deal with USB RESET event
	if ((USB_OTG_FS->GINTSTS & USB_OTG_GINTSTS_USBRST) == USB_OTG_GINTSTS_USBRST)
 8001062:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001070:	d10c      	bne.n	800108c <OTG_FS_IRQHandler+0x30>
	{
		// Reset USB core
		USB_Reset_Event_Handler();
 8001072:	f000 fb1d 	bl	80016b0 <USB_Reset_Event_Handler>

	    // Clear USBRST interrupt flag
	    USB_OTG_FS->GINTSTS |= USB_OTG_GINTSTS_USBRST;
 8001076:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001084:	6153      	str	r3, [r2, #20]

	    my_printf("RESET\r\n");
 8001086:	4895      	ldr	r0, [pc, #596]	; (80012dc <OTG_FS_IRQHandler+0x280>)
 8001088:	f7ff fbe4 	bl	8000854 <my_printf>
	}


	// Deal with USB SUSPEND event
	if ((USB_OTG_FS->GINTSTS & USB_OTG_GINTSTS_USBSUSP) == USB_OTG_GINTSTS_USBSUSP)
 800108c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800109a:	d112      	bne.n	80010c2 <OTG_FS_IRQHandler+0x66>
	{
		// Clear USBSUSP flag
		USB_OTG_FS->GINTSTS |= USB_OTG_GINTSTS_USBSUSP;
 800109c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010aa:	6153      	str	r3, [r2, #20]

		// Disable the USB SUSPEND event interrupt (to avoid multiple SUSPEND interrupts)
		USB_OTG_FS->GINTMSK &= ~USB_OTG_GINTMSK_USBSUSPM;
 80010ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ba:	6193      	str	r3, [r2, #24]

		my_printf("SUSPEND\r\n");
 80010bc:	4888      	ldr	r0, [pc, #544]	; (80012e0 <OTG_FS_IRQHandler+0x284>)
 80010be:	f7ff fbc9 	bl	8000854 <my_printf>
	}


	// Deal with USB ENUMERATION DONE event
    if (USB_OTG_FS->GINTSTS & USB_OTG_GINTSTS_ENUMDNE)
 80010c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00f      	beq.n	80010f0 <OTG_FS_IRQHandler+0x94>
    {
       	// Clear ENUMDNE flag
    	USB_OTG_FS->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 80010d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d8:	615a      	str	r2, [r3, #20]

    	// Re-enable the USB SUSPEND event interrupt
    	USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM;
 80010da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010e8:	6193      	str	r3, [r2, #24]

    	my_printf("ENUM DONE\r\n");
 80010ea:	487e      	ldr	r0, [pc, #504]	; (80012e4 <OTG_FS_IRQHandler+0x288>)
 80010ec:	f7ff fbb2 	bl	8000854 <my_printf>
    }


	// Deal with data RX event
    if ((USB_OTG_FS->GINTSTS & USB_OTG_GINTSTS_RXFLVL) == USB_OTG_GINTSTS_RXFLVL)
 80010f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b10      	cmp	r3, #16
 80010fc:	f040 814b 	bne.w	8001396 <OTG_FS_IRQHandler+0x33a>
	{
		// Read RX status
		temp = USB_OTG_FS->GRXSTSR;
 8001100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	60bb      	str	r3, [r7, #8]

		// Retrieve the number of received bytes
		g_usb_packet.bcnt 	= (uint16_t)( (temp & USB_OTG_GRXSTSP_BCNT_Msk) >>USB_OTG_GRXSTSP_BCNT_Pos);
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	b29b      	uxth	r3, r3
 800110e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b74      	ldr	r3, [pc, #464]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001116:	809a      	strh	r2, [r3, #4]
		g_usb_packet.status = (int8_t)  ( (temp & USB_OTG_GRXSTSP_PKTSTS_Msk) >>USB_OTG_GRXSTSP_PKTSTS_Pos);
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	0c5b      	lsrs	r3, r3, #17
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b70      	ldr	r3, [pc, #448]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001126:	701a      	strb	r2, [r3, #0]
		g_usb_packet.epnum	= (int8_t)  ( (temp & USB_OTG_GRXSTSP_EPNUM_Msk) >>USB_OTG_GRXSTSP_EPNUM_Pos);
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001134:	705a      	strb	r2, [r3, #1]

		// pop FIFO
		USB_OTG_FS->GRXSTSP;
 8001136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800113a:	6a1b      	ldr	r3, [r3, #32]

		my_printf("PK %d on EP%d of %d bytes : ", g_usb_packet.status, g_usb_packet.epnum, g_usb_packet.bcnt);
 800113c:	4b6a      	ldr	r3, [pc, #424]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	461a      	mov	r2, r3
 8001148:	4b67      	ldr	r3, [pc, #412]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 800114a:	889b      	ldrh	r3, [r3, #4]
 800114c:	4867      	ldr	r0, [pc, #412]	; (80012ec <OTG_FS_IRQHandler+0x290>)
 800114e:	f7ff fb81 	bl	8000854 <my_printf>

		// If this is a received SETUP packet (8 bytes received on EP0)
		if (g_usb_packet.status == USB_PKT_STATUS_SETUP)
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b06      	cmp	r3, #6
 8001158:	d10a      	bne.n	8001170 <OTG_FS_IRQHandler+0x114>
		{
			my_printf("[SETUP]");
 800115a:	4865      	ldr	r0, [pc, #404]	; (80012f0 <OTG_FS_IRQHandler+0x294>)
 800115c:	f7ff fb7a 	bl	8000854 <my_printf>

			// Handle SETUP packet
			USB_Setup_Packet_Handler();
 8001160:	f000 fb16 	bl	8001790 <USB_Setup_Packet_Handler>

			// Clear NAK bit and set EPENA to start transmission on EP0 (this terminates the SETUP transaction)
			USB_OTG_FS_OUTEP(0)->DOEPCTL |= USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA;
 8001164:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <OTG_FS_IRQHandler+0x298>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a62      	ldr	r2, [pc, #392]	; (80012f4 <OTG_FS_IRQHandler+0x298>)
 800116a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800116e:	6013      	str	r3, [r2, #0]
		}


		// If this is a SETUP transaction completed
		if (g_usb_packet.status == USB_PKT_STATUS_SETUP_COMPLETE)
 8001170:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d108      	bne.n	800118a <OTG_FS_IRQHandler+0x12e>
		{
			my_printf("[SETUP_COMPLETE]");
 8001178:	485f      	ldr	r0, [pc, #380]	; (80012f8 <OTG_FS_IRQHandler+0x29c>)
 800117a:	f7ff fb6b 	bl	8000854 <my_printf>

			// Clear NAK bit and set EPENA to start transmission on EP0
			USB_OTG_FS_OUTEP(0)->DOEPCTL |= USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA;
 800117e:	4b5d      	ldr	r3, [pc, #372]	; (80012f4 <OTG_FS_IRQHandler+0x298>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a5c      	ldr	r2, [pc, #368]	; (80012f4 <OTG_FS_IRQHandler+0x298>)
 8001184:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001188:	6013      	str	r3, [r2, #0]
		}


		// If this is an OUT transaction
		if (g_usb_packet.status == USB_PKT_STATUS_OUT)
 800118a:	4b57      	ldr	r3, [pc, #348]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b02      	cmp	r3, #2
 8001190:	f040 8081 	bne.w	8001296 <OTG_FS_IRQHandler+0x23a>
		{
			my_printf("[OUT]");
 8001194:	4859      	ldr	r0, [pc, #356]	; (80012fc <OTG_FS_IRQHandler+0x2a0>)
 8001196:	f7ff fb5d 	bl	8000854 <my_printf>

			switch (g_usb_packet.epnum)
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <OTG_FS_IRQHandler+0x14c>
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d039      	beq.n	800121a <OTG_FS_IRQHandler+0x1be>
 80011a6:	e076      	b.n	8001296 <OTG_FS_IRQHandler+0x23a>
			{
				case 0 :	// EP0
				{
					my_printf("[EP0]");
 80011a8:	4855      	ldr	r0, [pc, #340]	; (8001300 <OTG_FS_IRQHandler+0x2a4>)
 80011aa:	f7ff fb53 	bl	8000854 <my_printf>

					k = (g_usb_packet.bcnt >>2U);
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	81bb      	strh	r3, [r7, #12]
					if ( (g_usb_packet.bcnt - (k <<2U)) > 0) k++;
 80011b6:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 80011b8:	889b      	ldrh	r3, [r3, #4]
 80011ba:	461a      	mov	r2, r3
 80011bc:	89bb      	ldrh	r3, [r7, #12]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	dd02      	ble.n	80011cc <OTG_FS_IRQHandler+0x170>
 80011c6:	89bb      	ldrh	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	81bb      	strh	r3, [r7, #12]
					my_printf(" -> RECEIVING %d bytes in %d words ", g_usb_packet.bcnt, k);
 80011cc:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	4619      	mov	r1, r3
 80011d2:	89bb      	ldrh	r3, [r7, #12]
 80011d4:	461a      	mov	r2, r3
 80011d6:	484b      	ldr	r0, [pc, #300]	; (8001304 <OTG_FS_IRQHandler+0x2a8>)
 80011d8:	f7ff fb3c 	bl	8000854 <my_printf>


					g_usb_out_ctrl.process = 1;
 80011dc:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <OTG_FS_IRQHandler+0x2ac>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]

					// Retrieve DATA from OUT message
					p_fifo = (uint32_t*)0x50001000;
 80011e2:	4b4a      	ldr	r3, [pc, #296]	; (800130c <OTG_FS_IRQHandler+0x2b0>)
 80011e4:	607b      	str	r3, [r7, #4]
					USB_FIFO_Read(p_fifo, g_usb.rx_buffer, g_usb_packet.bcnt);
 80011e6:	4b40      	ldr	r3, [pc, #256]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 80011e8:	889b      	ldrh	r3, [r3, #4]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4948      	ldr	r1, [pc, #288]	; (8001310 <OTG_FS_IRQHandler+0x2b4>)
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fe50 	bl	8001e94 <USB_FIFO_Read>

					// Print result
					for (i=0; i<g_usb_packet.bcnt; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	81fb      	strh	r3, [r7, #14]
 80011f8:	e009      	b.n	800120e <OTG_FS_IRQHandler+0x1b2>
					{
						my_printf("[%02x] ", g_usb.rx_buffer[i]);
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	4a44      	ldr	r2, [pc, #272]	; (8001310 <OTG_FS_IRQHandler+0x2b4>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	4619      	mov	r1, r3
 8001202:	4844      	ldr	r0, [pc, #272]	; (8001314 <OTG_FS_IRQHandler+0x2b8>)
 8001204:	f7ff fb26 	bl	8000854 <my_printf>
					for (i=0; i<g_usb_packet.bcnt; i++)
 8001208:	89fb      	ldrh	r3, [r7, #14]
 800120a:	3301      	adds	r3, #1
 800120c:	81fb      	strh	r3, [r7, #14]
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001210:	889b      	ldrh	r3, [r3, #4]
 8001212:	89fa      	ldrh	r2, [r7, #14]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3f0      	bcc.n	80011fa <OTG_FS_IRQHandler+0x19e>
					}

					break;
 8001218:	e03d      	b.n	8001296 <OTG_FS_IRQHandler+0x23a>
				}

				case 1:		// EP1
				{
					my_printf("[EP1]");
 800121a:	483f      	ldr	r0, [pc, #252]	; (8001318 <OTG_FS_IRQHandler+0x2bc>)
 800121c:	f7ff fb1a 	bl	8000854 <my_printf>

					// Retrieve DATA from OUT message
					p_fifo = (uint32_t*)0x50002000;
 8001220:	4b3e      	ldr	r3, [pc, #248]	; (800131c <OTG_FS_IRQHandler+0x2c0>)
 8001222:	607b      	str	r3, [r7, #4]
					USB_FIFO_Read(p_fifo, g_usb.rx_buffer, g_usb_packet.bcnt);
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	461a      	mov	r2, r3
 800122a:	4939      	ldr	r1, [pc, #228]	; (8001310 <OTG_FS_IRQHandler+0x2b4>)
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 fe31 	bl	8001e94 <USB_FIFO_Read>

					my_printf("\r\ndone\r\n");
 8001232:	483b      	ldr	r0, [pc, #236]	; (8001320 <OTG_FS_IRQHandler+0x2c4>)
 8001234:	f7ff fb0e 	bl	8000854 <my_printf>

					// Send HEX to console
					for (i=0; i<g_usb_packet.bcnt; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	81fb      	strh	r3, [r7, #14]
 800123c:	e01f      	b.n	800127e <OTG_FS_IRQHandler+0x222>
					{
						my_printf("%02x ", g_usb.rx_buffer[i]);
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	4a33      	ldr	r2, [pc, #204]	; (8001310 <OTG_FS_IRQHandler+0x2b4>)
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	4619      	mov	r1, r3
 8001246:	4837      	ldr	r0, [pc, #220]	; (8001324 <OTG_FS_IRQHandler+0x2c8>)
 8001248:	f7ff fb04 	bl	8000854 <my_printf>

						if ( (i>0) & ((i%32) == 0) ) my_printf("\r\n");
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf14      	ite	ne
 8001252:	2301      	movne	r3, #1
 8001254:	2300      	moveq	r3, #0
 8001256:	b2da      	uxtb	r2, r3
 8001258:	89fb      	ldrh	r3, [r7, #14]
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	b29b      	uxth	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4013      	ands	r3, r2
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <OTG_FS_IRQHandler+0x21c>
 8001272:	482d      	ldr	r0, [pc, #180]	; (8001328 <OTG_FS_IRQHandler+0x2cc>)
 8001274:	f7ff faee 	bl	8000854 <my_printf>
					for (i=0; i<g_usb_packet.bcnt; i++)
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	3301      	adds	r3, #1
 800127c:	81fb      	strh	r3, [r7, #14]
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001280:	889b      	ldrh	r3, [r3, #4]
 8001282:	89fa      	ldrh	r2, [r7, #14]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3da      	bcc.n	800123e <OTG_FS_IRQHandler+0x1e2>
					}

					g_usb.rx_nbytes = g_usb_packet.bcnt;
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 800128a:	889b      	ldrh	r3, [r3, #4]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <OTG_FS_IRQHandler+0x2b4>)
 8001290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

					break;
 8001294:	bf00      	nop

			}
		}

		// If this is an OUT transaction completed
		if (g_usb_packet.status == USB_PKT_STATUS_OUT_COMPLETE)
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b03      	cmp	r3, #3
 800129c:	d165      	bne.n	800136a <OTG_FS_IRQHandler+0x30e>
		{
			my_printf("[OUT_COMPLETE]");
 800129e:	4823      	ldr	r0, [pc, #140]	; (800132c <OTG_FS_IRQHandler+0x2d0>)
 80012a0:	f7ff fad8 	bl	8000854 <my_printf>

			// Switch depending on end-point number
			switch(g_usb_packet.epnum)
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <OTG_FS_IRQHandler+0x28c>)
 80012a6:	785b      	ldrb	r3, [r3, #1]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <OTG_FS_IRQHandler+0x256>
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d043      	beq.n	8001338 <OTG_FS_IRQHandler+0x2dc>
 80012b0:	e05b      	b.n	800136a <OTG_FS_IRQHandler+0x30e>
			{
				case 0:			// EP0
				{
					my_printf("[EP0]");
 80012b2:	4813      	ldr	r0, [pc, #76]	; (8001300 <OTG_FS_IRQHandler+0x2a4>)
 80012b4:	f7ff face 	bl	8000854 <my_printf>

					if (g_usb_out_ctrl.process == 1)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <OTG_FS_IRQHandler+0x2ac>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d109      	bne.n	80012d4 <OTG_FS_IRQHandler+0x278>
					{
						g_usb_out_ctrl.process = 0;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <OTG_FS_IRQHandler+0x2ac>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]

						// Disable device IN EP FIFO empty interrupt
						USB_OTG_FS_DEVICE->DIEPEMPMSK &= ~(1U <<0U);
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <OTG_FS_IRQHandler+0x2d4>)
 80012c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ca:	4a19      	ldr	r2, [pc, #100]	; (8001330 <OTG_FS_IRQHandler+0x2d4>)
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	6353      	str	r3, [r2, #52]	; 0x34
					{
						// Do nothing
						my_printf(" Ignored...");
					}

					break;
 80012d2:	e04a      	b.n	800136a <OTG_FS_IRQHandler+0x30e>
						my_printf(" Ignored...");
 80012d4:	4817      	ldr	r0, [pc, #92]	; (8001334 <OTG_FS_IRQHandler+0x2d8>)
 80012d6:	f7ff fabd 	bl	8000854 <my_printf>
					break;
 80012da:	e046      	b.n	800136a <OTG_FS_IRQHandler+0x30e>
 80012dc:	080021a8 	.word	0x080021a8
 80012e0:	080021b0 	.word	0x080021b0
 80012e4:	080021bc 	.word	0x080021bc
 80012e8:	20010100 	.word	0x20010100
 80012ec:	080021c8 	.word	0x080021c8
 80012f0:	080021e8 	.word	0x080021e8
 80012f4:	50000b00 	.word	0x50000b00
 80012f8:	080021f0 	.word	0x080021f0
 80012fc:	08002204 	.word	0x08002204
 8001300:	0800220c 	.word	0x0800220c
 8001304:	08002214 	.word	0x08002214
 8001308:	2001011c 	.word	0x2001011c
 800130c:	50001000 	.word	0x50001000
 8001310:	20010120 	.word	0x20010120
 8001314:	08002238 	.word	0x08002238
 8001318:	08002240 	.word	0x08002240
 800131c:	50002000 	.word	0x50002000
 8001320:	08002248 	.word	0x08002248
 8001324:	08002254 	.word	0x08002254
 8001328:	0800225c 	.word	0x0800225c
 800132c:	08002260 	.word	0x08002260
 8001330:	50000800 	.word	0x50000800
 8001334:	08002270 	.word	0x08002270
				}

				case 1:			// EP1
				{
					my_printf("[EP1]");
 8001338:	486b      	ldr	r0, [pc, #428]	; (80014e8 <OTG_FS_IRQHandler+0x48c>)
 800133a:	f7ff fa8b 	bl	8000854 <my_printf>
					my_printf("Re-enabling OUT EP1 for next reception");
 800133e:	486b      	ldr	r0, [pc, #428]	; (80014ec <OTG_FS_IRQHandler+0x490>)
 8001340:	f7ff fa88 	bl	8000854 <my_printf>


					// Re-enable OUT EP1
					USB_OTG_FS_OUTEP(1)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA;
 8001344:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <OTG_FS_IRQHandler+0x494>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <OTG_FS_IRQHandler+0x494>)
 800134a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800134e:	6013      	str	r3, [r2, #0]

					// Clear OUT EP1 interrupt flags
					USB_OTG_FS_OUTEP(1)->DOEPINT |= 0xFF;
 8001350:	4b67      	ldr	r3, [pc, #412]	; (80014f0 <OTG_FS_IRQHandler+0x494>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a66      	ldr	r2, [pc, #408]	; (80014f0 <OTG_FS_IRQHandler+0x494>)
 8001356:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800135a:	6093      	str	r3, [r2, #8]

					// Clear NACK bit so that ACK is ready for next reception
					USB_OTG_FS_OUTEP(1)->DOEPCTL |= USB_OTG_DOEPCTL_CNAK;
 800135c:	4b64      	ldr	r3, [pc, #400]	; (80014f0 <OTG_FS_IRQHandler+0x494>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a63      	ldr	r2, [pc, #396]	; (80014f0 <OTG_FS_IRQHandler+0x494>)
 8001362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001366:	6013      	str	r3, [r2, #0]

					break;
 8001368:	bf00      	nop
			}
		}


		// Error catching...
		if (g_usb_packet.status == 0)
 800136a:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <OTG_FS_IRQHandler+0x498>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10e      	bne.n	8001390 <OTG_FS_IRQHandler+0x334>
		{
			my_printf(" Weird...");
 8001372:	4861      	ldr	r0, [pc, #388]	; (80014f8 <OTG_FS_IRQHandler+0x49c>)
 8001374:	f7ff fa6e 	bl	8000854 <my_printf>

			// Flush RX FIFO
			USB_OTG_FS->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001378:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800137c:	2210      	movs	r2, #16
 800137e:	611a      	str	r2, [r3, #16]
			while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001380:	bf00      	nop
 8001382:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	2b10      	cmp	r3, #16
 800138e:	d0f8      	beq.n	8001382 <OTG_FS_IRQHandler+0x326>
		}

		my_printf("\r\n");
 8001390:	485a      	ldr	r0, [pc, #360]	; (80014fc <OTG_FS_IRQHandler+0x4a0>)
 8001392:	f7ff fa5f 	bl	8000854 <my_printf>
	}


	// Deal with IN EP event
    if ( (USB_OTG_FS->GINTSTS & USB_OTG_GINTSTS_IEPINT) == USB_OTG_GINTSTS_IEPINT )
 8001396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013a4:	f040 816d 	bne.w	8001682 <OTG_FS_IRQHandler+0x626>
	{
		// If this is for EP0
		if ( (USB_OTG_FS_DEVICE->DAINT & 0x00000001) == 0x00000001)
 80013a8:	4b55      	ldr	r3, [pc, #340]	; (8001500 <OTG_FS_IRQHandler+0x4a4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	f040 80c8 	bne.w	8001546 <OTG_FS_IRQHandler+0x4ea>
		{
			my_printf("[IEP0]");
 80013b6:	4853      	ldr	r0, [pc, #332]	; (8001504 <OTG_FS_IRQHandler+0x4a8>)
 80013b8:	f7ff fa4c 	bl	8000854 <my_printf>

			if ( (USB_OTG_FS_INEP(0)->DIEPINT & USB_OTG_DIEPINT_XFRC_Msk)   == USB_OTG_DIEPINT_XFRC)   my_printf("[XFRC]");
 80013bc:	4b52      	ldr	r3, [pc, #328]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d102      	bne.n	80013ce <OTG_FS_IRQHandler+0x372>
 80013c8:	4850      	ldr	r0, [pc, #320]	; (800150c <OTG_FS_IRQHandler+0x4b0>)
 80013ca:	f7ff fa43 	bl	8000854 <my_printf>
			if ( (USB_OTG_FS_INEP(0)->DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == USB_OTG_DIEPINT_EPDISD) my_printf("[EPDISD]");
 80013ce:	4b4e      	ldr	r3, [pc, #312]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d102      	bne.n	80013e0 <OTG_FS_IRQHandler+0x384>
 80013da:	484d      	ldr	r0, [pc, #308]	; (8001510 <OTG_FS_IRQHandler+0x4b4>)
 80013dc:	f7ff fa3a 	bl	8000854 <my_printf>
			if ( (USB_OTG_FS_INEP(0)->DIEPINT & USB_OTG_DIEPINT_TOC_Msk)    == USB_OTG_DIEPINT_TOC)    my_printf("[TOC]");
 80013e0:	4b49      	ldr	r3, [pc, #292]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d102      	bne.n	80013f2 <OTG_FS_IRQHandler+0x396>
 80013ec:	4849      	ldr	r0, [pc, #292]	; (8001514 <OTG_FS_IRQHandler+0x4b8>)
 80013ee:	f7ff fa31 	bl	8000854 <my_printf>
			if ( (USB_OTG_FS_INEP(0)->DIEPINT & USB_OTG_DIEPINT_INEPNE_Msk) == USB_OTG_DIEPINT_INEPNE) my_printf("[INEPNE]");
 80013f2:	4b45      	ldr	r3, [pc, #276]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fa:	2b40      	cmp	r3, #64	; 0x40
 80013fc:	d102      	bne.n	8001404 <OTG_FS_IRQHandler+0x3a8>
 80013fe:	4846      	ldr	r0, [pc, #280]	; (8001518 <OTG_FS_IRQHandler+0x4bc>)
 8001400:	f7ff fa28 	bl	8000854 <my_printf>

			// if ( (USB_OTG_FS_INEP(0)->DIEPINT & USB_OTG_DIEPINT_TXFE_Msk) == USB_OTG_DIEPINT_TXFE)

			if ( (USB_OTG_FS_INEP(0)->DIEPINT & USB_OTG_DIEPINT_ITTXFE_Msk) == USB_OTG_DIEPINT_ITTXFE )
 8001404:	4b40      	ldr	r3, [pc, #256]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b10      	cmp	r3, #16
 800140e:	f040 8090 	bne.w	8001532 <OTG_FS_IRQHandler+0x4d6>
			{
				// my_printf("[TXFE]");
				my_printf("[ITTXFE]");
 8001412:	4842      	ldr	r0, [pc, #264]	; (800151c <OTG_FS_IRQHandler+0x4c0>)
 8001414:	f7ff fa1e 	bl	8000854 <my_printf>

				// If there's at least one packet to send
				if (g_usb_in_ctrl.pcnt > 0)
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8085 	beq.w	800152c <OTG_FS_IRQHandler+0x4d0>
				{
					my_printf(" -> Sending %d byte in %d packet", g_usb_in_ctrl.bcnt, g_usb_in_ctrl.pcnt);
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 8001424:	885b      	ldrh	r3, [r3, #2]
 8001426:	4619      	mov	r1, r3
 8001428:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	461a      	mov	r2, r3
 800142e:	483d      	ldr	r0, [pc, #244]	; (8001524 <OTG_FS_IRQHandler+0x4c8>)
 8001430:	f7ff fa10 	bl	8000854 <my_printf>

					if (g_usb_in_ctrl.bcnt <= 64)
 8001434:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 8001436:	885b      	ldrh	r3, [r3, #2]
 8001438:	2b40      	cmp	r3, #64	; 0x40
 800143a:	d80c      	bhi.n	8001456 <OTG_FS_IRQHandler+0x3fa>
					{
						USB_FIFO_Write((uint32_t*)0x50001000, (uint8_t*)&g_usb_in_ctrl.buffer[g_usb_in_ctrl.pindex * 64], g_usb_in_ctrl.bcnt);
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a37      	ldr	r2, [pc, #220]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 8001442:	7912      	ldrb	r2, [r2, #4]
 8001444:	0192      	lsls	r2, r2, #6
 8001446:	4413      	add	r3, r2
 8001448:	4a35      	ldr	r2, [pc, #212]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800144a:	8852      	ldrh	r2, [r2, #2]
 800144c:	4619      	mov	r1, r3
 800144e:	4836      	ldr	r0, [pc, #216]	; (8001528 <OTG_FS_IRQHandler+0x4cc>)
 8001450:	f000 fd51 	bl	8001ef6 <USB_FIFO_Write>
 8001454:	e00a      	b.n	800146c <OTG_FS_IRQHandler+0x410>
					}

					else
					{
						USB_FIFO_Write((uint32_t*)0x50001000, (uint8_t*)&g_usb_in_ctrl.buffer[g_usb_in_ctrl.pindex * 64], 64);
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	4a31      	ldr	r2, [pc, #196]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800145c:	7912      	ldrb	r2, [r2, #4]
 800145e:	0192      	lsls	r2, r2, #6
 8001460:	4413      	add	r3, r2
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	4619      	mov	r1, r3
 8001466:	4830      	ldr	r0, [pc, #192]	; (8001528 <OTG_FS_IRQHandler+0x4cc>)
 8001468:	f000 fd45 	bl	8001ef6 <USB_FIFO_Write>
					}

					// Decrement packet counter
					g_usb_in_ctrl.pcnt--;
 800146c:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800146e:	785b      	ldrb	r3, [r3, #1]
 8001470:	3b01      	subs	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 8001476:	705a      	strb	r2, [r3, #1]

					// Prepare for next packet (if necessary)
					if (g_usb_in_ctrl.pcnt > 0)
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d058      	beq.n	8001532 <OTG_FS_IRQHandler+0x4d6>
					{
						// Increment packet index
						g_usb_in_ctrl.pindex++;
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	3301      	adds	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b25      	ldr	r3, [pc, #148]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800148a:	711a      	strb	r2, [r3, #4]

						// Update byte count for next transfer
						g_usb_in_ctrl.bcnt -= 64;
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800148e:	885b      	ldrh	r3, [r3, #2]
 8001490:	3b40      	subs	r3, #64	; 0x40
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 8001496:	805a      	strh	r2, [r3, #2]

						// If there is only one packet, set number of bytes to transmit
						if (g_usb_in_ctrl.pcnt == 1)
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d108      	bne.n	80014b2 <OTG_FS_IRQHandler+0x456>
						{
							USB_OTG_FS_INEP(0)->DIEPTSIZ |= g_usb_in_ctrl.bcnt;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <OTG_FS_IRQHandler+0x4c4>)
 80014a6:	8852      	ldrh	r2, [r2, #2]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80014ac:	430b      	orrs	r3, r1
 80014ae:	6113      	str	r3, [r2, #16]
 80014b0:	e005      	b.n	80014be <OTG_FS_IRQHandler+0x462>
						}

						// Otherwise, set byte count to maximum for first packet
						else
						{
							USB_OTG_FS_INEP(0)->DIEPTSIZ |= 64;
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80014b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014bc:	6113      	str	r3, [r2, #16]
						}

						// Enable all IN EP interrupts
						USB_OTG_FS->GINTMSK |= USB_OTG_GINTMSK_IEPINT;
 80014be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6193      	str	r3, [r2, #24]

						// Enable device IN EP FIFO empty interrupt
						USB_OTG_FS_DEVICE->DIEPEMPMSK |= 1U <<0U;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <OTG_FS_IRQHandler+0x4a4>)
 80014d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <OTG_FS_IRQHandler+0x4a4>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6353      	str	r3, [r2, #52]	; 0x34

						// Enable IN EP0
						USB_OTG_FS_INEP(0)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <OTG_FS_IRQHandler+0x4ac>)
 80014e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e024      	b.n	8001532 <OTG_FS_IRQHandler+0x4d6>
 80014e8:	08002240 	.word	0x08002240
 80014ec:	0800227c 	.word	0x0800227c
 80014f0:	50000b20 	.word	0x50000b20
 80014f4:	20010100 	.word	0x20010100
 80014f8:	080022a4 	.word	0x080022a4
 80014fc:	0800225c 	.word	0x0800225c
 8001500:	50000800 	.word	0x50000800
 8001504:	080022b0 	.word	0x080022b0
 8001508:	50000900 	.word	0x50000900
 800150c:	080022b8 	.word	0x080022b8
 8001510:	080022c0 	.word	0x080022c0
 8001514:	080022cc 	.word	0x080022cc
 8001518:	080022d4 	.word	0x080022d4
 800151c:	080022e0 	.word	0x080022e0
 8001520:	20010110 	.word	0x20010110
 8001524:	080022ec 	.word	0x080022ec
 8001528:	50001000 	.word	0x50001000
				}

				// If there's nothing to send
				else
				{
					my_printf(" -> Nothing to send");
 800152c:	4857      	ldr	r0, [pc, #348]	; (800168c <OTG_FS_IRQHandler+0x630>)
 800152e:	f7ff f991 	bl	8000854 <my_printf>


			}

			// Clear all EP0 IN interrupt flags
			USB_OTG_FS_INEP(0)->DIEPINT |= 0x0000287B;
 8001532:	4b57      	ldr	r3, [pc, #348]	; (8001690 <OTG_FS_IRQHandler+0x634>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	4956      	ldr	r1, [pc, #344]	; (8001690 <OTG_FS_IRQHandler+0x634>)
 8001538:	f642 037b 	movw	r3, #10363	; 0x287b
 800153c:	4313      	orrs	r3, r2
 800153e:	608b      	str	r3, [r1, #8]

			my_printf("\r\n");
 8001540:	4854      	ldr	r0, [pc, #336]	; (8001694 <OTG_FS_IRQHandler+0x638>)
 8001542:	f7ff f987 	bl	8000854 <my_printf>
		}


		// If this is for EP1
		if ( (USB_OTG_FS_DEVICE->DAINT & 0x00000002) == 0x00000002)
 8001546:	4b54      	ldr	r3, [pc, #336]	; (8001698 <OTG_FS_IRQHandler+0x63c>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b02      	cmp	r3, #2
 8001550:	f040 8097 	bne.w	8001682 <OTG_FS_IRQHandler+0x626>
		{
			// my_printf("[IEP1]");
			// my_printf("[%08x]", USB_OTG_FS->GINTSTS);


	    	while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 8001554:	bf00      	nop
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <OTG_FS_IRQHandler+0x640>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155e:	2b40      	cmp	r3, #64	; 0x40
 8001560:	d1f9      	bne.n	8001556 <OTG_FS_IRQHandler+0x4fa>
	    	USART3->TDR = '1';
 8001562:	4b4e      	ldr	r3, [pc, #312]	; (800169c <OTG_FS_IRQHandler+0x640>)
 8001564:	2231      	movs	r2, #49	; 0x31
 8001566:	629a      	str	r2, [r3, #40]	; 0x28

			if ( (USB_OTG_FS_INEP(1)->DIEPINT & USB_OTG_DIEPINT_XFRC_Msk) == USB_OTG_DIEPINT_XFRC)
 8001568:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <OTG_FS_IRQHandler+0x644>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b01      	cmp	r3, #1
 8001572:	d10f      	bne.n	8001594 <OTG_FS_IRQHandler+0x538>
			{
				while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 8001574:	bf00      	nop
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <OTG_FS_IRQHandler+0x640>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157e:	2b40      	cmp	r3, #64	; 0x40
 8001580:	d1f9      	bne.n	8001576 <OTG_FS_IRQHandler+0x51a>
		    	USART3->TDR = 'X';
 8001582:	4b46      	ldr	r3, [pc, #280]	; (800169c <OTG_FS_IRQHandler+0x640>)
 8001584:	2258      	movs	r2, #88	; 0x58
 8001586:	629a      	str	r2, [r3, #40]	; 0x28

				USB_OTG_FS_DEVICE->DIEPMSK &= ~USB_OTG_DIEPMSK_XFRCM;
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <OTG_FS_IRQHandler+0x63c>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <OTG_FS_IRQHandler+0x63c>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6113      	str	r3, [r2, #16]

				// Transmission is done
				// The EP1 has been automatically disabled
			}

			if ( (USB_OTG_FS_INEP(1)->DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == USB_OTG_DIEPINT_EPDISD )
 8001594:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <OTG_FS_IRQHandler+0x644>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b02      	cmp	r3, #2
 800159e:	d109      	bne.n	80015b4 <OTG_FS_IRQHandler+0x558>
			{
				while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 80015a0:	bf00      	nop
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <OTG_FS_IRQHandler+0x640>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	2b40      	cmp	r3, #64	; 0x40
 80015ac:	d1f9      	bne.n	80015a2 <OTG_FS_IRQHandler+0x546>
		    	USART3->TDR = 'D';
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <OTG_FS_IRQHandler+0x640>)
 80015b0:	2244      	movs	r2, #68	; 0x44
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
			}

			if ( (USB_OTG_FS_INEP(1)->DIEPINT & USB_OTG_DIEPINT_TOC_Msk) == USB_OTG_DIEPINT_TOC)
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <OTG_FS_IRQHandler+0x644>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d109      	bne.n	80015d4 <OTG_FS_IRQHandler+0x578>
			{
				while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 80015c0:	bf00      	nop
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <OTG_FS_IRQHandler+0x640>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ca:	2b40      	cmp	r3, #64	; 0x40
 80015cc:	d1f9      	bne.n	80015c2 <OTG_FS_IRQHandler+0x566>
		    	USART3->TDR = 'T';
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <OTG_FS_IRQHandler+0x640>)
 80015d0:	2254      	movs	r2, #84	; 0x54
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
			}

			if ( (USB_OTG_FS_INEP(1)->DIEPINT & USB_OTG_DIEPINT_INEPNE_Msk) == USB_OTG_DIEPINT_INEPNE)
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <OTG_FS_IRQHandler+0x644>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015dc:	2b40      	cmp	r3, #64	; 0x40
 80015de:	d109      	bne.n	80015f4 <OTG_FS_IRQHandler+0x598>
			{
				while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 80015e0:	bf00      	nop
 80015e2:	4b2e      	ldr	r3, [pc, #184]	; (800169c <OTG_FS_IRQHandler+0x640>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ea:	2b40      	cmp	r3, #64	; 0x40
 80015ec:	d1f9      	bne.n	80015e2 <OTG_FS_IRQHandler+0x586>
		    	USART3->TDR = 'N';
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <OTG_FS_IRQHandler+0x640>)
 80015f0:	224e      	movs	r2, #78	; 0x4e
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
			}

			if ( (USB_OTG_FS_INEP(1)->DIEPINT & USB_OTG_DIEPINT_ITTXFE_Msk) == USB_OTG_DIEPINT_ITTXFE)
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <OTG_FS_IRQHandler+0x644>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d109      	bne.n	8001614 <OTG_FS_IRQHandler+0x5b8>
			{
				while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 8001600:	bf00      	nop
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <OTG_FS_IRQHandler+0x640>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160a:	2b40      	cmp	r3, #64	; 0x40
 800160c:	d1f9      	bne.n	8001602 <OTG_FS_IRQHandler+0x5a6>
		    	USART3->TDR = 'I';
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <OTG_FS_IRQHandler+0x640>)
 8001610:	2249      	movs	r2, #73	; 0x49
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
			}

			if ( (USB_OTG_FS_INEP(1)->DIEPINT & USB_OTG_DIEPINT_TXFE_Msk) == USB_OTG_DIEPINT_TXFE)
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <OTG_FS_IRQHandler+0x644>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161c:	2b80      	cmp	r3, #128	; 0x80
 800161e:	d129      	bne.n	8001674 <OTG_FS_IRQHandler+0x618>
			{
				while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 8001620:	bf00      	nop
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <OTG_FS_IRQHandler+0x640>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162a:	2b40      	cmp	r3, #64	; 0x40
 800162c:	d1f9      	bne.n	8001622 <OTG_FS_IRQHandler+0x5c6>
		    	USART3->TDR = 'E';
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <OTG_FS_IRQHandler+0x640>)
 8001630:	2245      	movs	r2, #69	; 0x45
 8001632:	629a      	str	r2, [r3, #40]	; 0x28

				// Writing to the FIFO triggers the data transmission upon next IN token
				if (g_usb.tx_nbytes > 0)
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <OTG_FS_IRQHandler+0x648>)
 8001636:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800163a:	2b00      	cmp	r3, #0
 800163c:	d014      	beq.n	8001668 <OTG_FS_IRQHandler+0x60c>
				{
					// Copy data to send into EP1 TX FIFO
					p_fifo = (uint32_t*)0x50002000;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <OTG_FS_IRQHandler+0x64c>)
 8001640:	607b      	str	r3, [r7, #4]
					USB_FIFO_Write(p_fifo, g_usb.tx_buffer, g_usb.tx_nbytes);
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <OTG_FS_IRQHandler+0x648>)
 8001644:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	4917      	ldr	r1, [pc, #92]	; (80016ac <OTG_FS_IRQHandler+0x650>)
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fc51 	bl	8001ef6 <USB_FIFO_Write>

					// No more data to send
					g_usb.tx_nbytes = 0;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <OTG_FS_IRQHandler+0x648>)
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

					USB_OTG_FS_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_XFRCM;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <OTG_FS_IRQHandler+0x63c>)
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <OTG_FS_IRQHandler+0x63c>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6113      	str	r3, [r2, #16]
				}

				// Disable IN EP1 FIFO empty (TXFE) interrupt
				USB_OTG_FS_DEVICE->DIEPEMPMSK &= ~(1U <<1U);
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <OTG_FS_IRQHandler+0x63c>)
 800166a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <OTG_FS_IRQHandler+0x63c>)
 800166e:	f023 0302 	bic.w	r3, r3, #2
 8001672:	6353      	str	r3, [r2, #52]	; 0x34
			}

			// Clear all EP1 IN interrupt flags
			USB_OTG_FS_INEP(1)->DIEPINT |= 0x0000287B;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <OTG_FS_IRQHandler+0x644>)
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	4909      	ldr	r1, [pc, #36]	; (80016a0 <OTG_FS_IRQHandler+0x644>)
 800167a:	f642 037b 	movw	r3, #10363	; 0x287b
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
		}
	}
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	08002310 	.word	0x08002310
 8001690:	50000900 	.word	0x50000900
 8001694:	0800225c 	.word	0x0800225c
 8001698:	50000800 	.word	0x50000800
 800169c:	40004800 	.word	0x40004800
 80016a0:	50000920 	.word	0x50000920
 80016a4:	20010120 	.word	0x20010120
 80016a8:	50002000 	.word	0x50002000
 80016ac:	20010161 	.word	0x20010161

080016b0 <USB_Reset_Event_Handler>:

/*
 * USB RESET event handler
 */
static void USB_Reset_Event_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
	uint8_t		i;

	// Reset Remote Wake-up Signaling flag (don't know why...)
	USB_OTG_FS_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <USB_Reset_Event_Handler+0xd0>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <USB_Reset_Event_Handler+0xd0>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6053      	str	r3, [r2, #4]

	// Flush EP0 TX FIFO
	USB_OTG_FS->GRSTCTL = USB_OTG_GRSTCTL_TXFFLSH | (0x00 <<USB_OTG_GRSTCTL_TXFNUM_Pos);
 80016c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016c6:	2220      	movs	r2, #32
 80016c8:	611a      	str	r2, [r3, #16]
	while ((USB_OTG_FS->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80016ca:	bf00      	nop
 80016cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d0f8      	beq.n	80016cc <USB_Reset_Event_Handler+0x1c>

	// Clear all EP Interrupt flags
    for (i=0; i<6; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	e01e      	b.n	800171e <USB_Reset_Event_Handler+0x6e>
    {
    	USB_OTG_FS_INEP(i)->DIEPINT  |= 0x0000287BU;
 80016e0:	79fa      	ldrb	r2, [r7, #7]
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <USB_Reset_Event_Handler+0xd4>)
 80016e4:	4413      	add	r3, r2
 80016e6:	015b      	lsls	r3, r3, #5
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	79f9      	ldrb	r1, [r7, #7]
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <USB_Reset_Event_Handler+0xd4>)
 80016ee:	440b      	add	r3, r1
 80016f0:	015b      	lsls	r3, r3, #5
 80016f2:	4619      	mov	r1, r3
 80016f4:	f642 037b 	movw	r3, #10363	; 0x287b
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
    	USB_OTG_FS_OUTEP(i)->DOEPINT |= 0x0000313BU;
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <USB_Reset_Event_Handler+0xd8>)
 8001700:	4413      	add	r3, r2
 8001702:	015b      	lsls	r3, r3, #5
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	79f9      	ldrb	r1, [r7, #7]
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <USB_Reset_Event_Handler+0xd8>)
 800170a:	440b      	add	r3, r1
 800170c:	015b      	lsls	r3, r3, #5
 800170e:	4619      	mov	r1, r3
 8001710:	f243 133b 	movw	r3, #12603	; 0x313b
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
    for (i=0; i<6; i++)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3301      	adds	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d9dd      	bls.n	80016e0 <USB_Reset_Event_Handler+0x30>
    }

    // Un-mask Interrupt for EP0 (IN/OUT)
    USB_OTG_FS_DEVICE->DAINTMSK |= 0x00010001U;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <USB_Reset_Event_Handler+0xd0>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	4a15      	ldr	r2, [pc, #84]	; (8001780 <USB_Reset_Event_Handler+0xd0>)
 800172a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800172e:	61d3      	str	r3, [r2, #28]

	// Un-mask Interrupt for OUT EP : SETUP | Transfet Compete | EP disable
    USB_OTG_FS_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <USB_Reset_Event_Handler+0xd0>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <USB_Reset_Event_Handler+0xd0>)
 8001736:	f043 030b 	orr.w	r3, r3, #11
 800173a:	6153      	str	r3, [r2, #20]

	// Set Default Address to 0
    USB_OTG_FS_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <USB_Reset_Event_Handler+0xd0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <USB_Reset_Event_Handler+0xd0>)
 8001742:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001746:	6013      	str	r3, [r2, #0]

	// Setup EP0 to receive SETUP messages
    USB_OTG_FS_OUTEP(0)->DOEPTSIZ = 0U;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <USB_Reset_Event_Handler+0xdc>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
    USB_OTG_FS_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <USB_Reset_Event_Handler+0xdc>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <USB_Reset_Event_Handler+0xdc>)
 8001754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001758:	6113      	str	r3, [r2, #16]
    USB_OTG_FS_OUTEP(0)->DOEPTSIZ |= (3U * 8U);										// 3 packets of 8 bytes
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <USB_Reset_Event_Handler+0xdc>)
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <USB_Reset_Event_Handler+0xdc>)
 8001760:	f043 0318 	orr.w	r3, r3, #24
 8001764:	6113      	str	r3, [r2, #16]
    USB_OTG_FS_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  					// 3 packets
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <USB_Reset_Event_Handler+0xdc>)
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <USB_Reset_Event_Handler+0xdc>)
 800176c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001770:	6113      	str	r3, [r2, #16]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	50000800 	.word	0x50000800
 8001784:	02800048 	.word	0x02800048
 8001788:	02800058 	.word	0x02800058
 800178c:	50000b00 	.word	0x50000b00

08001790 <USB_Setup_Packet_Handler>:

/*
 * USB SETUP packet handler
 */
static void USB_Setup_Packet_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b090      	sub	sp, #64	; 0x40
 8001794:	af00      	add	r7, sp, #0
	uint8_t		rx_data[64];		// Buffer to store incoming packet data

	// Retrieve DATA from SETUP message
	USB_FIFO_Read((uint32_t *)0x50001000, rx_data, g_usb_packet.bcnt);
 8001796:	4b99      	ldr	r3, [pc, #612]	; (80019fc <USB_Setup_Packet_Handler+0x26c>)
 8001798:	889a      	ldrh	r2, [r3, #4]
 800179a:	463b      	mov	r3, r7
 800179c:	4619      	mov	r1, r3
 800179e:	4898      	ldr	r0, [pc, #608]	; (8001a00 <USB_Setup_Packet_Handler+0x270>)
 80017a0:	f000 fb78 	bl	8001e94 <USB_FIFO_Read>

	// Parse SETUP packet
	g_usb_setup_packet.bmRequestType = rx_data[0];
 80017a4:	783a      	ldrb	r2, [r7, #0]
 80017a6:	4b97      	ldr	r3, [pc, #604]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 80017a8:	701a      	strb	r2, [r3, #0]
	g_usb_setup_packet.bRequest		 = rx_data[1];
 80017aa:	787a      	ldrb	r2, [r7, #1]
 80017ac:	4b95      	ldr	r3, [pc, #596]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 80017ae:	705a      	strb	r2, [r3, #1]
	g_usb_setup_packet.wValue		 = rx_data[3] <<8U | rx_data[2];
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	78bb      	ldrb	r3, [r7, #2]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21b      	sxth	r3, r3
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b90      	ldr	r3, [pc, #576]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 80017c2:	805a      	strh	r2, [r3, #2]
	g_usb_setup_packet.wIndex		 = rx_data[5] <<8U | rx_data[4];
 80017c4:	797b      	ldrb	r3, [r7, #5]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	793b      	ldrb	r3, [r7, #4]
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 80017d6:	809a      	strh	r2, [r3, #4]
	g_usb_setup_packet.wLength		 = rx_data[7] <<8U | rx_data[6];
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b21a      	sxth	r2, r3
 80017de:	79bb      	ldrb	r3, [r7, #6]
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 80017ea:	80da      	strh	r2, [r3, #6]


	/* STANDARD REQUESTS */

	if ((g_usb_setup_packet.bmRequestType == 0x00) || (g_usb_setup_packet.bmRequestType == 0x80))
 80017ec:	4b85      	ldr	r3, [pc, #532]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <USB_Setup_Packet_Handler+0x6e>
 80017f4:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b80      	cmp	r3, #128	; 0x80
 80017fa:	f040 8220 	bne.w	8001c3e <USB_Setup_Packet_Handler+0x4ae>
	{

		// Switch depending on request
		switch(g_usb_setup_packet.bRequest)
 80017fe:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	2b09      	cmp	r3, #9
 8001804:	f000 8173 	beq.w	8001aee <USB_Setup_Packet_Handler+0x35e>
 8001808:	2b09      	cmp	r3, #9
 800180a:	f300 8215 	bgt.w	8001c38 <USB_Setup_Packet_Handler+0x4a8>
 800180e:	2b05      	cmp	r3, #5
 8001810:	f000 812d 	beq.w	8001a6e <USB_Setup_Packet_Handler+0x2de>
 8001814:	2b06      	cmp	r3, #6
 8001816:	f040 820f 	bne.w	8001c38 <USB_Setup_Packet_Handler+0x4a8>
		{
			// 														GET DESCRIPTOR
			case USB_REQUEST_GET_DESCRIPTOR:
			{
				my_printf("[GET DESCRIPTOR]");
 800181a:	487b      	ldr	r0, [pc, #492]	; (8001a08 <USB_Setup_Packet_Handler+0x278>)
 800181c:	f7ff f81a 	bl	8000854 <my_printf>

				// Switch depending on requested descriptor type (MSB of wValue)
				switch((g_usb_setup_packet.wValue & 0xFF00) >>8U)
 8001820:	4b78      	ldr	r3, [pc, #480]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 8001822:	885b      	ldrh	r3, [r3, #2]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	b29b      	uxth	r3, r3
 8001828:	3b01      	subs	r3, #1
 800182a:	2b05      	cmp	r3, #5
 800182c:	f200 80c3 	bhi.w	80019b6 <USB_Setup_Packet_Handler+0x226>
 8001830:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <USB_Setup_Packet_Handler+0xa8>)
 8001832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001836:	bf00      	nop
 8001838:	08001851 	.word	0x08001851
 800183c:	08001877 	.word	0x08001877
 8001840:	080018cd 	.word	0x080018cd
 8001844:	080019b7 	.word	0x080019b7
 8001848:	080019b7 	.word	0x080019b7
 800184c:	0800198f 	.word	0x0800198f
				{
					//														DEVICE
					case USB_DESCRIPTOR_DEVICE:
					{
						my_printf("[DEVICE]");
 8001850:	486e      	ldr	r0, [pc, #440]	; (8001a0c <USB_Setup_Packet_Handler+0x27c>)
 8001852:	f7fe ffff 	bl	8000854 <my_printf>

						// Setup IN control structure for Device Descriptor sending
						g_usb_in_ctrl.epnum  = 0;
 8001856:	4b6e      	ldr	r3, [pc, #440]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
						g_usb_in_ctrl.pcnt   = 1;
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 800185e:	2201      	movs	r2, #1
 8001860:	705a      	strb	r2, [r3, #1]
						g_usb_in_ctrl.bcnt   = 18;
 8001862:	4b6b      	ldr	r3, [pc, #428]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001864:	2212      	movs	r2, #18
 8001866:	805a      	strh	r2, [r3, #2]
						g_usb_in_ctrl.pindex = 0;
 8001868:	4b69      	ldr	r3, [pc, #420]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 800186a:	2200      	movs	r2, #0
 800186c:	711a      	strb	r2, [r3, #4]
						g_usb_in_ctrl.buffer = (uint8_t*)devDesc;
 800186e:	4b68      	ldr	r3, [pc, #416]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001870:	4a68      	ldr	r2, [pc, #416]	; (8001a14 <USB_Setup_Packet_Handler+0x284>)
 8001872:	609a      	str	r2, [r3, #8]


						break;
 8001874:	e09f      	b.n	80019b6 <USB_Setup_Packet_Handler+0x226>
					}

					//													CONFIGURATION
					case USB_DESCRIPTOR_CONFIGURATION:
					{
						my_printf("[CONFIGURATION %d]", g_usb_setup_packet.wLength);
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 8001878:	88db      	ldrh	r3, [r3, #6]
 800187a:	4619      	mov	r1, r3
 800187c:	4866      	ldr	r0, [pc, #408]	; (8001a18 <USB_Setup_Packet_Handler+0x288>)
 800187e:	f7fe ffe9 	bl	8000854 <my_printf>

						// Setup IN control structure for Configuration Descriptor sending
						if (g_usb_setup_packet.wLength <64)
 8001882:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 8001884:	88db      	ldrh	r3, [r3, #6]
 8001886:	2b3f      	cmp	r3, #63	; 0x3f
 8001888:	d810      	bhi.n	80018ac <USB_Setup_Packet_Handler+0x11c>
						{
							g_usb_in_ctrl.epnum  = 0;
 800188a:	4b61      	ldr	r3, [pc, #388]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
							g_usb_in_ctrl.pcnt   = 1;
 8001890:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001892:	2201      	movs	r2, #1
 8001894:	705a      	strb	r2, [r3, #1]
							g_usb_in_ctrl.bcnt   = g_usb_setup_packet.wLength;
 8001896:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 8001898:	88da      	ldrh	r2, [r3, #6]
 800189a:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 800189c:	805a      	strh	r2, [r3, #2]
							g_usb_in_ctrl.pindex = 0;
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	711a      	strb	r2, [r3, #4]
							g_usb_in_ctrl.buffer = (uint8_t*)cfgDesc;
 80018a4:	4b5a      	ldr	r3, [pc, #360]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018a6:	4a5d      	ldr	r2, [pc, #372]	; (8001a1c <USB_Setup_Packet_Handler+0x28c>)
 80018a8:	609a      	str	r2, [r3, #8]
							g_usb_in_ctrl.bcnt   = 67;
							g_usb_in_ctrl.pindex = 0;
							g_usb_in_ctrl.buffer = (uint8_t*)cfgDesc;
						}

						break;
 80018aa:	e084      	b.n	80019b6 <USB_Setup_Packet_Handler+0x226>
							g_usb_in_ctrl.epnum  = 0;
 80018ac:	4b58      	ldr	r3, [pc, #352]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
							g_usb_in_ctrl.pcnt   = 2;
 80018b2:	4b57      	ldr	r3, [pc, #348]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	705a      	strb	r2, [r3, #1]
							g_usb_in_ctrl.bcnt   = 67;
 80018b8:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018ba:	2243      	movs	r2, #67	; 0x43
 80018bc:	805a      	strh	r2, [r3, #2]
							g_usb_in_ctrl.pindex = 0;
 80018be:	4b54      	ldr	r3, [pc, #336]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	711a      	strb	r2, [r3, #4]
							g_usb_in_ctrl.buffer = (uint8_t*)cfgDesc;
 80018c4:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018c6:	4a55      	ldr	r2, [pc, #340]	; (8001a1c <USB_Setup_Packet_Handler+0x28c>)
 80018c8:	609a      	str	r2, [r3, #8]
						break;
 80018ca:	e074      	b.n	80019b6 <USB_Setup_Packet_Handler+0x226>
					}

					//														STRING
					case USB_DESCRIPTOR_STRING:
					{
						my_printf("[STRING %d]", (uint8_t)(g_usb_setup_packet.wValue & 0x00FF));
 80018cc:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 80018ce:	885b      	ldrh	r3, [r3, #2]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4619      	mov	r1, r3
 80018d4:	4852      	ldr	r0, [pc, #328]	; (8001a20 <USB_Setup_Packet_Handler+0x290>)
 80018d6:	f7fe ffbd 	bl	8000854 <my_printf>

						// Setup IN control structure for Configuration Descriptor sending
						g_usb_in_ctrl.epnum  = 0;
 80018da:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
						g_usb_in_ctrl.pcnt   = 1;
 80018e0:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	705a      	strb	r2, [r3, #1]
						g_usb_in_ctrl.pindex = 0;
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	711a      	strb	r2, [r3, #4]

						// Switch depending on STRING index
						switch ((uint8_t)(g_usb_setup_packet.wValue & 0x00FF))
 80018ec:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 80018ee:	885b      	ldrh	r3, [r3, #2]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d85e      	bhi.n	80019b4 <USB_Setup_Packet_Handler+0x224>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <USB_Setup_Packet_Handler+0x16c>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	0800192d 	.word	0x0800192d
 8001904:	0800194d 	.word	0x0800194d
 8001908:	0800196d 	.word	0x0800196d
						{
							case 0:						// STRING DESCRIPTOR [0]
							{
								if (g_usb_setup_packet.wLength < sizeof(strDesc0))
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 800190e:	88db      	ldrh	r3, [r3, #6]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d804      	bhi.n	800191e <USB_Setup_Packet_Handler+0x18e>
								{
									g_usb_in_ctrl.bcnt = g_usb_setup_packet.wLength;
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 8001916:	88da      	ldrh	r2, [r3, #6]
 8001918:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 800191a:	805a      	strh	r2, [r3, #2]
 800191c:	e002      	b.n	8001924 <USB_Setup_Packet_Handler+0x194>
								}
								else
								{
									g_usb_in_ctrl.bcnt   = sizeof(strDesc0);		// 4 bytes
 800191e:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001920:	2204      	movs	r2, #4
 8001922:	805a      	strh	r2, [r3, #2]
								}

								g_usb_in_ctrl.buffer = (uint8_t*)strDesc0;
 8001924:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001926:	4a3f      	ldr	r2, [pc, #252]	; (8001a24 <USB_Setup_Packet_Handler+0x294>)
 8001928:	609a      	str	r2, [r3, #8]

								break;
 800192a:	e02f      	b.n	800198c <USB_Setup_Packet_Handler+0x1fc>
							}

							case 1:						// STRING DESCRIPTOR [1]
							{
								if (g_usb_setup_packet.wLength < sizeof(strDesc1))
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 800192e:	88db      	ldrh	r3, [r3, #6]
 8001930:	2b25      	cmp	r3, #37	; 0x25
 8001932:	d804      	bhi.n	800193e <USB_Setup_Packet_Handler+0x1ae>
								{
									g_usb_in_ctrl.bcnt = g_usb_setup_packet.wLength;
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 8001936:	88da      	ldrh	r2, [r3, #6]
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 800193a:	805a      	strh	r2, [r3, #2]
 800193c:	e002      	b.n	8001944 <USB_Setup_Packet_Handler+0x1b4>
								}
								else
								{
									g_usb_in_ctrl.bcnt   = sizeof(strDesc1);		// 38 bytes
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001940:	2226      	movs	r2, #38	; 0x26
 8001942:	805a      	strh	r2, [r3, #2]
								}

								g_usb_in_ctrl.buffer = (uint8_t*)strDesc1;
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001946:	4a38      	ldr	r2, [pc, #224]	; (8001a28 <USB_Setup_Packet_Handler+0x298>)
 8001948:	609a      	str	r2, [r3, #8]

								break;
 800194a:	e01f      	b.n	800198c <USB_Setup_Packet_Handler+0x1fc>
							}

							case 2:						// STRING DESCRIPTOR [2]
							{
								if (g_usb_setup_packet.wLength < sizeof(strDesc2))
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 800194e:	88db      	ldrh	r3, [r3, #6]
 8001950:	2b2b      	cmp	r3, #43	; 0x2b
 8001952:	d804      	bhi.n	800195e <USB_Setup_Packet_Handler+0x1ce>
								{
									g_usb_in_ctrl.bcnt = g_usb_setup_packet.wLength;
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 8001956:	88da      	ldrh	r2, [r3, #6]
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 800195a:	805a      	strh	r2, [r3, #2]
 800195c:	e002      	b.n	8001964 <USB_Setup_Packet_Handler+0x1d4>
								}
								else
								{
									g_usb_in_ctrl.bcnt   = sizeof(strDesc2);		// 44 bytes
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001960:	222c      	movs	r2, #44	; 0x2c
 8001962:	805a      	strh	r2, [r3, #2]
								}

								g_usb_in_ctrl.buffer = (uint8_t*)strDesc2;
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001966:	4a31      	ldr	r2, [pc, #196]	; (8001a2c <USB_Setup_Packet_Handler+0x29c>)
 8001968:	609a      	str	r2, [r3, #8]

								break;
 800196a:	e00f      	b.n	800198c <USB_Setup_Packet_Handler+0x1fc>
							}

							case 3:						// STRING DESCRIPTOR [3]
							{
								if (g_usb_setup_packet.wLength < sizeof(strDesc3))
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 800196e:	88db      	ldrh	r3, [r3, #6]
 8001970:	2b19      	cmp	r3, #25
 8001972:	d804      	bhi.n	800197e <USB_Setup_Packet_Handler+0x1ee>
								{
									g_usb_in_ctrl.bcnt = g_usb_setup_packet.wLength;
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <USB_Setup_Packet_Handler+0x274>)
 8001976:	88da      	ldrh	r2, [r3, #6]
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 800197a:	805a      	strh	r2, [r3, #2]
 800197c:	e002      	b.n	8001984 <USB_Setup_Packet_Handler+0x1f4>
								}
								else
								{
									g_usb_in_ctrl.bcnt   = sizeof(strDesc3);		// 26 bytes
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001980:	221a      	movs	r2, #26
 8001982:	805a      	strh	r2, [r3, #2]
								}

								g_usb_in_ctrl.buffer = (uint8_t*)strDesc3;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <USB_Setup_Packet_Handler+0x2a0>)
 8001988:	609a      	str	r2, [r3, #8]

								break;
 800198a:	bf00      	nop
							}
						}

						break;
 800198c:	e012      	b.n	80019b4 <USB_Setup_Packet_Handler+0x224>
					}

					//													DEVICE QUALIFIER
					case USB_DESCRIPTOR_QUALIFIER:
					{
						my_printf(" [DEVICE QUALIFIER]");
 800198e:	4829      	ldr	r0, [pc, #164]	; (8001a34 <USB_Setup_Packet_Handler+0x2a4>)
 8001990:	f7fe ff60 	bl	8000854 <my_printf>

						// Setup IN control structure for Device Qualifier Descriptor sending
						g_usb_in_ctrl.epnum  = 0;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
						g_usb_in_ctrl.pcnt   = 1;
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 800199c:	2201      	movs	r2, #1
 800199e:	705a      	strb	r2, [r3, #1]
						g_usb_in_ctrl.bcnt   = sizeof(devQualDesc);					// 10 bytes
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80019a2:	220a      	movs	r2, #10
 80019a4:	805a      	strh	r2, [r3, #2]
						g_usb_in_ctrl.pindex = 0;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	711a      	strb	r2, [r3, #4]
						g_usb_in_ctrl.buffer = (uint8_t*)devQualDesc;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80019ae:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <USB_Setup_Packet_Handler+0x2a8>)
 80019b0:	609a      	str	r2, [r3, #8]

						break;
 80019b2:	e000      	b.n	80019b6 <USB_Setup_Packet_Handler+0x226>
						break;
 80019b4:	bf00      	nop
					}
				}

				// Prepare IN EP0 for transmission
				USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);		// packets number
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <USB_Setup_Packet_Handler+0x2ac>)
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	4920      	ldr	r1, [pc, #128]	; (8001a3c <USB_Setup_Packet_Handler+0x2ac>)
 80019bc:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <USB_Setup_Packet_Handler+0x2b0>)
 80019be:	4013      	ands	r3, r2
 80019c0:	610b      	str	r3, [r1, #16]
				USB_OTG_FS_INEP(0)->DIEPTSIZ |= g_usb_in_ctrl.pcnt <<19U;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <USB_Setup_Packet_Handler+0x2ac>)
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80019c8:	7852      	ldrb	r2, [r2, #1]
 80019ca:	04d2      	lsls	r2, r2, #19
 80019cc:	4611      	mov	r1, r2
 80019ce:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <USB_Setup_Packet_Handler+0x2ac>)
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6113      	str	r3, [r2, #16]

				USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);		// bytes number
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <USB_Setup_Packet_Handler+0x2ac>)
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	4918      	ldr	r1, [pc, #96]	; (8001a3c <USB_Setup_Packet_Handler+0x2ac>)
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <USB_Setup_Packet_Handler+0x2b4>)
 80019dc:	4013      	ands	r3, r2
 80019de:	610b      	str	r3, [r1, #16]

				// If there is only one packet, set number of bytes to transmit
				if (g_usb_in_ctrl.pcnt == 1)
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80019e2:	785b      	ldrb	r3, [r3, #1]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d12f      	bne.n	8001a48 <USB_Setup_Packet_Handler+0x2b8>
				{
					USB_OTG_FS_INEP(0)->DIEPTSIZ |= g_usb_in_ctrl.bcnt;
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <USB_Setup_Packet_Handler+0x2ac>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <USB_Setup_Packet_Handler+0x280>)
 80019ee:	8852      	ldrh	r2, [r2, #2]
 80019f0:	4611      	mov	r1, r2
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <USB_Setup_Packet_Handler+0x2ac>)
 80019f4:	430b      	orrs	r3, r1
 80019f6:	6113      	str	r3, [r2, #16]
 80019f8:	e02c      	b.n	8001a54 <USB_Setup_Packet_Handler+0x2c4>
 80019fa:	bf00      	nop
 80019fc:	20010100 	.word	0x20010100
 8001a00:	50001000 	.word	0x50001000
 8001a04:	20010108 	.word	0x20010108
 8001a08:	08002324 	.word	0x08002324
 8001a0c:	08002338 	.word	0x08002338
 8001a10:	20010110 	.word	0x20010110
 8001a14:	20010000 	.word	0x20010000
 8001a18:	08002344 	.word	0x08002344
 8001a1c:	20010088 	.word	0x20010088
 8001a20:	08002358 	.word	0x08002358
 8001a24:	20010014 	.word	0x20010014
 8001a28:	20010018 	.word	0x20010018
 8001a2c:	20010040 	.word	0x20010040
 8001a30:	2001006c 	.word	0x2001006c
 8001a34:	08002364 	.word	0x08002364
 8001a38:	200100cc 	.word	0x200100cc
 8001a3c:	50000900 	.word	0x50000900
 8001a40:	e007ffff 	.word	0xe007ffff
 8001a44:	fff80000 	.word	0xfff80000
				}

				// Otherwise, set byte count to maximum for first packet
				else
				{
					USB_OTG_FS_INEP(0)->DIEPTSIZ |= 64;
 8001a48:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	4a6f      	ldr	r2, [pc, #444]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a52:	6113      	str	r3, [r2, #16]
				}

				// Enable device IN EP FIFO empty interrupt
				USB_OTG_FS_DEVICE->DIEPEMPMSK |= 1U <<0U;
 8001a54:	4b6e      	ldr	r3, [pc, #440]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	4a6d      	ldr	r2, [pc, #436]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6353      	str	r3, [r2, #52]	; 0x34

				// Enable IN EP0
				USB_OTG_FS_INEP(0)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001a60:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a69      	ldr	r2, [pc, #420]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001a6a:	6013      	str	r3, [r2, #0]

				break;
 8001a6c:	e0e7      	b.n	8001c3e <USB_Setup_Packet_Handler+0x4ae>

			//													SET ADDRESS
			case USB_REQUEST_SET_ADDRESS:
			{
				// Address is LSB of wValue
				my_printf("[SET ADRESS %d]", (uint8_t)(g_usb_setup_packet.wValue & 0x00FF));
 8001a6e:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <USB_Setup_Packet_Handler+0x484>)
 8001a70:	885b      	ldrh	r3, [r3, #2]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	4868      	ldr	r0, [pc, #416]	; (8001c18 <USB_Setup_Packet_Handler+0x488>)
 8001a78:	f7fe feec 	bl	8000854 <my_printf>

				// Set Device address
				USB_OTG_FS_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8001a7c:	4b64      	ldr	r3, [pc, #400]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a63      	ldr	r2, [pc, #396]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001a82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a86:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_DEVICE->DCFG |= (uint8_t)(g_usb_setup_packet.wValue & 0x00FF) <<USB_OTG_DCFG_DAD_Pos;
 8001a88:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a61      	ldr	r2, [pc, #388]	; (8001c14 <USB_Setup_Packet_Handler+0x484>)
 8001a8e:	8852      	ldrh	r2, [r2, #2]
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	4611      	mov	r1, r2
 8001a96:	4a5e      	ldr	r2, [pc, #376]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6013      	str	r3, [r2, #0]

				g_usb_in_ctrl.pcnt   = 1;
 8001a9c:	4b5f      	ldr	r3, [pc, #380]	; (8001c1c <USB_Setup_Packet_Handler+0x48c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	705a      	strb	r2, [r3, #1]
				g_usb_in_ctrl.bcnt   = 0;
 8001aa2:	4b5e      	ldr	r3, [pc, #376]	; (8001c1c <USB_Setup_Packet_Handler+0x48c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	805a      	strh	r2, [r3, #2]

				// Setup IN EP0 for transmission
				USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);		// 1 packet
 8001aa8:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	4957      	ldr	r1, [pc, #348]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001aae:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <USB_Setup_Packet_Handler+0x490>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	610b      	str	r3, [r1, #16]
				USB_OTG_FS_INEP(0)->DIEPTSIZ |= 1U <<19U;
 8001ab4:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	4a54      	ldr	r2, [pc, #336]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001abe:	6113      	str	r3, [r2, #16]

				USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);		// 0 bytes
 8001ac0:	4b52      	ldr	r3, [pc, #328]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	4951      	ldr	r1, [pc, #324]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001ac6:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <USB_Setup_Packet_Handler+0x494>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	610b      	str	r3, [r1, #16]
				USB_OTG_FS_INEP(0)->DIEPTSIZ |= 0;
 8001acc:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001ace:	4a4f      	ldr	r2, [pc, #316]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	6113      	str	r3, [r2, #16]

				// Disable device IN EP FIFO empty interrupt
				USB_OTG_FS_DEVICE->DIEPEMPMSK &= ~(1U <<0U);
 8001ad4:	4b4e      	ldr	r3, [pc, #312]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad8:	4a4d      	ldr	r2, [pc, #308]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6353      	str	r3, [r2, #52]	; 0x34

				// Enable IN EP0
				USB_OTG_FS_INEP(0)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001ae0:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a49      	ldr	r2, [pc, #292]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001aea:	6013      	str	r3, [r2, #0]

				break;
 8001aec:	e0a7      	b.n	8001c3e <USB_Setup_Packet_Handler+0x4ae>


			// 													SET CONFIGURATION
			case USB_REQUEST_SET_CONFIGURATION:
			{
				my_printf("[SET CONFIGURATION]");
 8001aee:	484e      	ldr	r0, [pc, #312]	; (8001c28 <USB_Setup_Packet_Handler+0x498>)
 8001af0:	f7fe feb0 	bl	8000854 <my_printf>
				/*
				 *  Configure IN EP1
				 */

				// Clear all IN EP(1) interrupts flags
				USB_OTG_FS_INEP(1)->DIEPINT |=  0x0000287BU;
 8001af4:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	494c      	ldr	r1, [pc, #304]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001afa:	f642 037b 	movw	r3, #10363	; 0x287b
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]

				// Enable all IN EP Transfer Complete (XFRC) interrupt (this one only)
				USB_OTG_FS_DEVICE->DIEPMSK  &= ~0x0000207BU;
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	4942      	ldr	r1, [pc, #264]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001b08:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <USB_Setup_Packet_Handler+0x4a0>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	610b      	str	r3, [r1, #16]
				// USB_OTG_FS_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_XFRCM;

			    // Un-mask general interrupts from IN EP1
			    USB_OTG_FS_DEVICE->DAINTMSK |= 0x00000002U;
 8001b0e:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a3f      	ldr	r2, [pc, #252]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	61d3      	str	r3, [r2, #28]

			    // Setup IN EP1 in BULK mode (without enabling it at that time)
				USB_OTG_FS_INEP(1)->DIEPCTL = 0x00000000U;
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
				USB_OTG_FS_INEP(1)->DIEPCTL |= 2 <<USB_OTG_DIEPCTL_EPTYP_Pos;			// Bulk
 8001b20:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a41      	ldr	r2, [pc, #260]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b2a:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_INEP(1)->DIEPCTL |= USB_OTG_DIEPCTL_USBAEP;					// USB Active
 8001b2c:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a3e      	ldr	r2, [pc, #248]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b36:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_INEP(1)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;			// Set DATA0 PID
 8001b38:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_INEP(1)->DIEPCTL |= 1U  << USB_OTG_DIEPCTL_TXFNUM_Pos;		// FIFO Number
 8001b44:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b4e:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_INEP(1)->DIEPCTL |= 64U << USB_OTG_DIEPCTL_MPSIZ_Pos;		// Max packet size = 64B
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a35      	ldr	r2, [pc, #212]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5a:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_INEP(1)->DIEPCTL |= USB_OTG_DIEPCTL_CNAK;					// Clear NAK
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <USB_Setup_Packet_Handler+0x49c>)
 8001b62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b66:	6013      	str	r3, [r2, #0]
				/*
				 * Configure OUT EP1
				 */

				// Clear all OUT EP(1) interrupts flags
				USB_OTG_FS_OUTEP(1)->DOEPINT |=  0x0000313BU;
 8001b68:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4931      	ldr	r1, [pc, #196]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001b6e:	f243 133b 	movw	r3, #12603	; 0x313b
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]

				// Setup OUT EP1 in BULK mode
				USB_OTG_FS_OUTEP(1)->DOEPCTL = 0x00000000U;
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
				USB_OTG_FS_OUTEP(1)->DOEPCTL |= 2 <<USB_OTG_DOEPCTL_EPTYP_Pos;			// Bulk
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2c      	ldr	r2, [pc, #176]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b86:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_OUTEP(1)->DOEPCTL |= USB_OTG_DOEPCTL_USBAEP;					// USB Active
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b92:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_OUTEP(1)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;			// Set DATA0 PID
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a26      	ldr	r2, [pc, #152]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_OUTEP(1)->DOEPCTL |= 64U <<USB_OTG_DOEPCTL_MPSIZ_Pos;		// Max packet size = 64B
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001baa:	6013      	str	r3, [r2, #0]
				USB_OTG_FS_OUTEP(1)->DOEPCTL |= USB_OTG_DOEPCTL_CNAK;					// Clear NAK
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <USB_Setup_Packet_Handler+0x4a4>)
 8001bb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bb6:	6013      	str	r3, [r2, #0]

				/*
				 *  Send a status IN packet on EP0
				 */

				g_usb_in_ctrl.pcnt   = 1;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <USB_Setup_Packet_Handler+0x48c>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	705a      	strb	r2, [r3, #1]
				g_usb_in_ctrl.bcnt   = 0;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <USB_Setup_Packet_Handler+0x48c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	805a      	strh	r2, [r3, #2]

				// Setup IN EP0 for transmission
				USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);		// 1 packet
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	4910      	ldr	r1, [pc, #64]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <USB_Setup_Packet_Handler+0x490>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	610b      	str	r3, [r1, #16]
				USB_OTG_FS_INEP(0)->DIEPTSIZ |= 1U <<19U;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001bd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bda:	6113      	str	r3, [r2, #16]

				USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);		// 0 bytes
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	490a      	ldr	r1, [pc, #40]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <USB_Setup_Packet_Handler+0x494>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	610b      	str	r3, [r1, #16]
				USB_OTG_FS_INEP(0)->DIEPTSIZ |= 0;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	6113      	str	r3, [r2, #16]

				// Disable device IN EP FIFO empty interrupt
				USB_OTG_FS_DEVICE->DIEPEMPMSK &= ~(1U <<0U);
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <USB_Setup_Packet_Handler+0x480>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6353      	str	r3, [r2, #52]	; 0x34

				// Enable IN EP0
				USB_OTG_FS_INEP(0)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a02      	ldr	r2, [pc, #8]	; (8001c0c <USB_Setup_Packet_Handler+0x47c>)
 8001c02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001c06:	6013      	str	r3, [r2, #0]

			    break;
 8001c08:	e019      	b.n	8001c3e <USB_Setup_Packet_Handler+0x4ae>
 8001c0a:	bf00      	nop
 8001c0c:	50000900 	.word	0x50000900
 8001c10:	50000800 	.word	0x50000800
 8001c14:	20010108 	.word	0x20010108
 8001c18:	08002378 	.word	0x08002378
 8001c1c:	20010110 	.word	0x20010110
 8001c20:	e007ffff 	.word	0xe007ffff
 8001c24:	fff80000 	.word	0xfff80000
 8001c28:	08002388 	.word	0x08002388
 8001c2c:	50000920 	.word	0x50000920
 8001c30:	ffffdf84 	.word	0xffffdf84
 8001c34:	50000b20 	.word	0x50000b20
			}

			default:
			{
				my_printf("[UNKNOWN SETUP MESSAGE]");
 8001c38:	488a      	ldr	r0, [pc, #552]	; (8001e64 <USB_Setup_Packet_Handler+0x6d4>)
 8001c3a:	f7fe fe0b 	bl	8000854 <my_printf>
	}


	/* CLASS SPECIFIC REQUESTS */

	if ((g_usb_setup_packet.bmRequestType == 0xA1) && (g_usb_setup_packet.bRequest == 0x21))
 8001c3e:	4b8a      	ldr	r3, [pc, #552]	; (8001e68 <USB_Setup_Packet_Handler+0x6d8>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2ba1      	cmp	r3, #161	; 0xa1
 8001c44:	d13b      	bne.n	8001cbe <USB_Setup_Packet_Handler+0x52e>
 8001c46:	4b88      	ldr	r3, [pc, #544]	; (8001e68 <USB_Setup_Packet_Handler+0x6d8>)
 8001c48:	785b      	ldrb	r3, [r3, #1]
 8001c4a:	2b21      	cmp	r3, #33	; 0x21
 8001c4c:	d137      	bne.n	8001cbe <USB_Setup_Packet_Handler+0x52e>
	{
		// 																GET LINE CODING
		// Setup IN control structure for USB CDC Line Coding
		g_usb_in_ctrl.epnum  = 0;
 8001c4e:	4b87      	ldr	r3, [pc, #540]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
		g_usb_in_ctrl.pcnt   = 1;
 8001c54:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	705a      	strb	r2, [r3, #1]
		g_usb_in_ctrl.bcnt   = 7;
 8001c5a:	4b84      	ldr	r3, [pc, #528]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	805a      	strh	r2, [r3, #2]
		g_usb_in_ctrl.pindex = 0;
 8001c60:	4b82      	ldr	r3, [pc, #520]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	711a      	strb	r2, [r3, #4]
		g_usb_in_ctrl.buffer = (uint8_t*)usb_cdc_line_coding;
 8001c66:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001c68:	4a81      	ldr	r2, [pc, #516]	; (8001e70 <USB_Setup_Packet_Handler+0x6e0>)
 8001c6a:	609a      	str	r2, [r3, #8]

		// Prepare IN EP0 for transmission
		USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);		// packets number
 8001c6c:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	4980      	ldr	r1, [pc, #512]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001c72:	4b81      	ldr	r3, [pc, #516]	; (8001e78 <USB_Setup_Packet_Handler+0x6e8>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	610b      	str	r3, [r1, #16]
		USB_OTG_FS_INEP(0)->DIEPTSIZ |= g_usb_in_ctrl.pcnt <<19U;
 8001c78:	4b7e      	ldr	r3, [pc, #504]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a7b      	ldr	r2, [pc, #492]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001c7e:	7852      	ldrb	r2, [r2, #1]
 8001c80:	04d2      	lsls	r2, r2, #19
 8001c82:	4611      	mov	r1, r2
 8001c84:	4a7b      	ldr	r2, [pc, #492]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001c86:	430b      	orrs	r3, r1
 8001c88:	6113      	str	r3, [r2, #16]

		USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);		// bytes number
 8001c8a:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	4979      	ldr	r1, [pc, #484]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001c90:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <USB_Setup_Packet_Handler+0x6ec>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	610b      	str	r3, [r1, #16]
		USB_OTG_FS_INEP(0)->DIEPTSIZ |= g_usb_in_ctrl.bcnt;
 8001c96:	4b77      	ldr	r3, [pc, #476]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	4a74      	ldr	r2, [pc, #464]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001c9c:	8852      	ldrh	r2, [r2, #2]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4a74      	ldr	r2, [pc, #464]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	6113      	str	r3, [r2, #16]

		// Enable device IN EP FIFO empty interrupt
		USB_OTG_FS_DEVICE->DIEPEMPMSK |= 1U <<0U;
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6353      	str	r3, [r2, #52]	; 0x34

		// Enable IN EP0
		USB_OTG_FS_INEP(0)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001cb2:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6f      	ldr	r2, [pc, #444]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001cb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001cbc:	6013      	str	r3, [r2, #0]
	}


	if ((g_usb_setup_packet.bmRequestType == 0x21) && (g_usb_setup_packet.bRequest == 0x22))
 8001cbe:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <USB_Setup_Packet_Handler+0x6d8>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b21      	cmp	r3, #33	; 0x21
 8001cc4:	f040 8099 	bne.w	8001dfa <USB_Setup_Packet_Handler+0x66a>
 8001cc8:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <USB_Setup_Packet_Handler+0x6d8>)
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	2b22      	cmp	r3, #34	; 0x22
 8001cce:	f040 8094 	bne.w	8001dfa <USB_Setup_Packet_Handler+0x66a>
	{

		// 																SET CONTROL LINE STATE
		g_usb_in_ctrl.pcnt   = 1;
 8001cd2:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	705a      	strb	r2, [r3, #1]
		g_usb_in_ctrl.bcnt   = 0;
 8001cd8:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	805a      	strh	r2, [r3, #2]

		// Setup IN EP0 for transmission
		USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);		// 1 packet
 8001cde:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	4964      	ldr	r1, [pc, #400]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001ce4:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <USB_Setup_Packet_Handler+0x6e8>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	610b      	str	r3, [r1, #16]
		USB_OTG_FS_INEP(0)->DIEPTSIZ |= 1U <<19U;
 8001cea:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	4a61      	ldr	r2, [pc, #388]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cf4:	6113      	str	r3, [r2, #16]

		USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);		// 0 bytes
 8001cf6:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	495e      	ldr	r1, [pc, #376]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001cfc:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <USB_Setup_Packet_Handler+0x6ec>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	610b      	str	r3, [r1, #16]
		USB_OTG_FS_INEP(0)->DIEPTSIZ |= 0;
 8001d02:	4b5c      	ldr	r3, [pc, #368]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001d04:	4a5b      	ldr	r2, [pc, #364]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	6113      	str	r3, [r2, #16]


		// Disable device IN EP FIFO empty interrupt
		USB_OTG_FS_DEVICE->DIEPEMPMSK &= ~(1U <<0U);
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	4a5c      	ldr	r2, [pc, #368]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6353      	str	r3, [r2, #52]	; 0x34

		// Enable IN EP0
		USB_OTG_FS_INEP(0)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001d16:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a56      	ldr	r2, [pc, #344]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001d1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001d20:	6013      	str	r3, [r2, #0]


		// Activate IN EP1 in bulk mode with 128-bytes max packet size
		USB_OTG_FS_INEP(1)->DIEPCTL |= 0x02 <<USB_OTG_DIEPCTL_EPTYP_Pos;
 8001d22:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <USB_Setup_Packet_Handler+0x6f4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <USB_Setup_Packet_Handler+0x6f4>)
 8001d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d2c:	6013      	str	r3, [r2, #0]
		USB_OTG_FS_INEP(1)->DIEPCTL |= 128  <<USB_OTG_DIEPCTL_MPSIZ_Pos;
 8001d2e:	4b55      	ldr	r3, [pc, #340]	; (8001e84 <USB_Setup_Packet_Handler+0x6f4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a54      	ldr	r2, [pc, #336]	; (8001e84 <USB_Setup_Packet_Handler+0x6f4>)
 8001d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d38:	6013      	str	r3, [r2, #0]
		USB_OTG_FS_INEP(1)->DIEPCTL |= USB_OTG_DIEPCTL_USBAEP;
 8001d3a:	4b52      	ldr	r3, [pc, #328]	; (8001e84 <USB_Setup_Packet_Handler+0x6f4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a51      	ldr	r2, [pc, #324]	; (8001e84 <USB_Setup_Packet_Handler+0x6f4>)
 8001d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d44:	6013      	str	r3, [r2, #0]

		// Disable device IN EP1 FIFO empty interrupt
		USB_OTG_FS_DEVICE->DIEPEMPMSK &= ~(1U <<1U);
 8001d46:	4b4e      	ldr	r3, [pc, #312]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001d4c:	f023 0302 	bic.w	r3, r3, #2
 8001d50:	6353      	str	r3, [r2, #52]	; 0x34

		// Clear all IN EP1 interrupt flags
		USB_OTG_FS_INEP(1)->DIEPINT = 0xFFU;
 8001d52:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <USB_Setup_Packet_Handler+0x6f4>)
 8001d54:	22ff      	movs	r2, #255	; 0xff
 8001d56:	609a      	str	r2, [r3, #8]

		// Unmask IN EP1 interrupts
		USB_OTG_FS_DEVICE->DAINTMSK |= 0x00000002;
 8001d58:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	4a48      	ldr	r2, [pc, #288]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	61d3      	str	r3, [r2, #28]

		// Activate OUT EP1 in bulk mode with 128-bytes max packet size
		USB_OTG_FS_OUTEP(1)->DOEPCTL |= 0x02 <<USB_OTG_DOEPCTL_EPTYP_Pos;
 8001d64:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <USB_Setup_Packet_Handler+0x6f8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <USB_Setup_Packet_Handler+0x6f8>)
 8001d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d6e:	6013      	str	r3, [r2, #0]
		USB_OTG_FS_OUTEP(1)->DOEPCTL |= 128  <<USB_OTG_DOEPCTL_MPSIZ_Pos;
 8001d70:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <USB_Setup_Packet_Handler+0x6f8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a44      	ldr	r2, [pc, #272]	; (8001e88 <USB_Setup_Packet_Handler+0x6f8>)
 8001d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7a:	6013      	str	r3, [r2, #0]
		USB_OTG_FS_OUTEP(1)->DOEPCTL |= USB_OTG_DOEPCTL_USBAEP;
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <USB_Setup_Packet_Handler+0x6f8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a41      	ldr	r2, [pc, #260]	; (8001e88 <USB_Setup_Packet_Handler+0x6f8>)
 8001d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d86:	6013      	str	r3, [r2, #0]
		USB_OTG_FS_OUTEP(1)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA;
 8001d88:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <USB_Setup_Packet_Handler+0x6f8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a3e      	ldr	r2, [pc, #248]	; (8001e88 <USB_Setup_Packet_Handler+0x6f8>)
 8001d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d92:	6013      	str	r3, [r2, #0]

		// Activate IN EP2 in Interrupt mode with 8-bytes max packet size
		USB_OTG_FS_INEP(2)->DIEPCTL |= 0x03 <<USB_OTG_DIEPCTL_EPTYP_Pos;
 8001d94:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <USB_Setup_Packet_Handler+0x6fc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <USB_Setup_Packet_Handler+0x6fc>)
 8001d9a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001d9e:	6013      	str	r3, [r2, #0]
		USB_OTG_FS_INEP(2)->DIEPCTL |= 8  <<USB_OTG_DIEPCTL_MPSIZ_Pos;
 8001da0:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <USB_Setup_Packet_Handler+0x6fc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a39      	ldr	r2, [pc, #228]	; (8001e8c <USB_Setup_Packet_Handler+0x6fc>)
 8001da6:	f043 0308 	orr.w	r3, r3, #8
 8001daa:	6013      	str	r3, [r2, #0]
		USB_OTG_FS_INEP(2)->DIEPCTL |= USB_OTG_DIEPCTL_USBAEP;
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <USB_Setup_Packet_Handler+0x6fc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <USB_Setup_Packet_Handler+0x6fc>)
 8001db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db6:	6013      	str	r3, [r2, #0]

		// Disable device IN EP2 FIFO empty interrupt
		USB_OTG_FS_DEVICE->DIEPEMPMSK &= ~(1U <<2U);
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbc:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	6353      	str	r3, [r2, #52]	; 0x34

		// Clear all IN EP1 interrupt flags
		USB_OTG_FS_INEP(2)->DIEPINT = 0xFFU;
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <USB_Setup_Packet_Handler+0x6fc>)
 8001dc6:	22ff      	movs	r2, #255	; 0xff
 8001dc8:	609a      	str	r2, [r3, #8]

		// Unmask IN EP2 interrupts
		USB_OTG_FS_DEVICE->DAINTMSK |= 0x00000004;
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4a2c      	ldr	r2, [pc, #176]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	61d3      	str	r3, [r2, #28]

		// Check the status of the control line
		if (g_usb_setup_packet.wValue==3)
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <USB_Setup_Packet_Handler+0x6d8>)
 8001dd8:	885b      	ldrh	r3, [r3, #2]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d109      	bne.n	8001df2 <USB_Setup_Packet_Handler+0x662>
		{
			if (g_usb.cdc_ready == 0)
 8001dde:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <USB_Setup_Packet_Handler+0x700>)
 8001de0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d108      	bne.n	8001dfa <USB_Setup_Packet_Handler+0x66a>
			{
				g_usb.cdc_ready = 1;
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <USB_Setup_Packet_Handler+0x700>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8001df0:	e003      	b.n	8001dfa <USB_Setup_Packet_Handler+0x66a>
			}
		}

		else
		{
			g_usb.cdc_ready = 0;
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <USB_Setup_Packet_Handler+0x700>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		}
	}


	if ((g_usb_setup_packet.bmRequestType == 0x21) && (g_usb_setup_packet.bRequest == 0x20))
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <USB_Setup_Packet_Handler+0x6d8>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b21      	cmp	r3, #33	; 0x21
 8001e00:	d12b      	bne.n	8001e5a <USB_Setup_Packet_Handler+0x6ca>
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <USB_Setup_Packet_Handler+0x6d8>)
 8001e04:	785b      	ldrb	r3, [r3, #1]
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d127      	bne.n	8001e5a <USB_Setup_Packet_Handler+0x6ca>
	{
		// 																SET LINE CODING
		g_usb_in_ctrl.pcnt   = 1;
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	705a      	strb	r2, [r3, #1]
		g_usb_in_ctrl.bcnt   = 0;
 8001e10:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <USB_Setup_Packet_Handler+0x6dc>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	805a      	strh	r2, [r3, #2]

		// Setup IN EP0 for transmission
		USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);		// 1 packet
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	4916      	ldr	r1, [pc, #88]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <USB_Setup_Packet_Handler+0x6e8>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	610b      	str	r3, [r1, #16]
		USB_OTG_FS_INEP(0)->DIEPTSIZ |= 1U <<19U;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e2c:	6113      	str	r3, [r2, #16]

		USB_OTG_FS_INEP(0)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);		// 0 bytes
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	4910      	ldr	r1, [pc, #64]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <USB_Setup_Packet_Handler+0x6ec>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	610b      	str	r3, [r1, #16]
		USB_OTG_FS_INEP(0)->DIEPTSIZ |= 0;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	6113      	str	r3, [r2, #16]

		// Disable device IN EP FIFO empty interrupt
		USB_OTG_FS_DEVICE->DIEPEMPMSK &= ~(1U <<0U);
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <USB_Setup_Packet_Handler+0x6f0>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6353      	str	r3, [r2, #52]	; 0x34

		// Enable IN EP0
		USB_OTG_FS_INEP(0)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <USB_Setup_Packet_Handler+0x6e4>)
 8001e54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001e58:	6013      	str	r3, [r2, #0]
	}
}
 8001e5a:	bf00      	nop
 8001e5c:	3740      	adds	r7, #64	; 0x40
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	0800239c 	.word	0x0800239c
 8001e68:	20010108 	.word	0x20010108
 8001e6c:	20010110 	.word	0x20010110
 8001e70:	200100d8 	.word	0x200100d8
 8001e74:	50000900 	.word	0x50000900
 8001e78:	e007ffff 	.word	0xe007ffff
 8001e7c:	fff80000 	.word	0xfff80000
 8001e80:	50000800 	.word	0x50000800
 8001e84:	50000920 	.word	0x50000920
 8001e88:	50000b20 	.word	0x50000b20
 8001e8c:	50000940 	.word	0x50000940
 8001e90:	20010120 	.word	0x20010120

08001e94 <USB_FIFO_Read>:

/*
 * Read a number bytes from RX FIFO and store into buffer
 */
static void USB_FIFO_Read(uint32_t* fifo, uint8_t* buffer, uint16_t bcnt)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
	uint16_t	i,j,k;

	// Read FIFO
	if (bcnt > 0)
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <USB_FIFO_Read+0x56>
	{
		// Compute k, the number of 32-bit words to read
		k = (bcnt >>2U);
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	827b      	strh	r3, [r7, #18]
		if ((bcnt - (k <<2U)) > 0) k++;
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	8a7b      	ldrh	r3, [r7, #18]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	dd02      	ble.n	8001ec0 <USB_FIFO_Read+0x2c>
 8001eba:	8a7b      	ldrh	r3, [r7, #18]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	827b      	strh	r3, [r7, #18]

		// Read words from DFIFO
		// (The USB core manages DFIFO addressing, so only the access register address is needed)
		j = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	82bb      	strh	r3, [r7, #20]
		for(i=0; i<k; i++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	82fb      	strh	r3, [r7, #22]
 8001ec8:	e00b      	b.n	8001ee2 <USB_FIFO_Read+0x4e>
		{
			*(uint32_t*)&buffer[j] = *fifo;
 8001eca:	8abb      	ldrh	r3, [r7, #20]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	4413      	add	r3, r2
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	601a      	str	r2, [r3, #0]
			j += 4;
 8001ed6:	8abb      	ldrh	r3, [r7, #20]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	82bb      	strh	r3, [r7, #20]
		for(i=0; i<k; i++)
 8001edc:	8afb      	ldrh	r3, [r7, #22]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	82fb      	strh	r3, [r7, #22]
 8001ee2:	8afa      	ldrh	r2, [r7, #22]
 8001ee4:	8a7b      	ldrh	r3, [r7, #18]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d3ef      	bcc.n	8001eca <USB_FIFO_Read+0x36>
		}
	}
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <USB_FIFO_Write>:

/*
 * Write a number of bytes from buffer into TX FIFO
 */
static void USB_FIFO_Write(uint32_t* fifo, uint8_t* buffer, uint16_t bcnt)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b087      	sub	sp, #28
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	4613      	mov	r3, r2
 8001f02:	80fb      	strh	r3, [r7, #6]
	uint16_t	i;

	// Write FIFO
	for (i=0; i<bcnt; i+=4)
 8001f04:	2300      	movs	r3, #0
 8001f06:	82fb      	strh	r3, [r7, #22]
 8001f08:	e008      	b.n	8001f1c <USB_FIFO_Write+0x26>
	{
		*fifo = *(uint32_t*)&buffer[i];
 8001f0a:	8afb      	ldrh	r3, [r7, #22]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	4413      	add	r3, r2
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]
	for (i=0; i<bcnt; i+=4)
 8001f16:	8afb      	ldrh	r3, [r7, #22]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	82fb      	strh	r3, [r7, #22]
 8001f1c:	8afa      	ldrh	r2, [r7, #22]
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d3f2      	bcc.n	8001f0a <USB_FIFO_Write+0x14>
	}
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f3a:	490e      	ldr	r1, [pc, #56]	; (8001f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f50:	4c0b      	ldr	r4, [pc, #44]	; (8001f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f5e:	f000 f813 	bl	8001f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f62:	f000 f8a3 	bl	80020ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f66:	f7fe f94f 	bl	8000208 <main>
  bx  lr    
 8001f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f70:	20010000 	.word	0x20010000
  ldr r1, =_edata
 8001f74:	200100e4 	.word	0x200100e4
  ldr r2, =_sidata
 8001f78:	080023cc 	.word	0x080023cc
  ldr r2, =_sbss
 8001f7c:	200100e4 	.word	0x200100e4
  ldr r4, =_ebss
 8001f80:	200101a4 	.word	0x200101a4

08001f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC_IRQHandler>
	...

08001f88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	2302      	movs	r3, #2
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <SystemCoreClockUpdate+0xec>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d011      	beq.n	8001ffa <SystemCoreClockUpdate+0x4e>
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d844      	bhi.n	8002066 <SystemCoreClockUpdate+0xba>
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <SystemCoreClockUpdate+0x3e>
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d004      	beq.n	8001ff2 <SystemCoreClockUpdate+0x46>
 8001fe8:	e03d      	b.n	8002066 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001fea:	4b2c      	ldr	r3, [pc, #176]	; (800209c <SystemCoreClockUpdate+0xf0>)
 8001fec:	4a2c      	ldr	r2, [pc, #176]	; (80020a0 <SystemCoreClockUpdate+0xf4>)
 8001fee:	601a      	str	r2, [r3, #0]
      break;
 8001ff0:	e03d      	b.n	800206e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <SystemCoreClockUpdate+0xf0>)
 8001ff4:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <SystemCoreClockUpdate+0xf8>)
 8001ff6:	601a      	str	r2, [r3, #0]
      break;
 8001ff8:	e039      	b.n	800206e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <SystemCoreClockUpdate+0xec>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	0d9b      	lsrs	r3, r3, #22
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <SystemCoreClockUpdate+0xec>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002016:	4a23      	ldr	r2, [pc, #140]	; (80020a4 <SystemCoreClockUpdate+0xf8>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <SystemCoreClockUpdate+0xec>)
 8002020:	6852      	ldr	r2, [r2, #4]
 8002022:	0992      	lsrs	r2, r2, #6
 8002024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e00b      	b.n	8002048 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <SystemCoreClockUpdate+0xf4>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	4a17      	ldr	r2, [pc, #92]	; (8002098 <SystemCoreClockUpdate+0xec>)
 800203a:	6852      	ldr	r2, [r2, #4]
 800203c:	0992      	lsrs	r2, r2, #6
 800203e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <SystemCoreClockUpdate+0xec>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	3301      	adds	r3, #1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002060:	4a0e      	ldr	r2, [pc, #56]	; (800209c <SystemCoreClockUpdate+0xf0>)
 8002062:	6013      	str	r3, [r2, #0]
      break;
 8002064:	e003      	b.n	800206e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <SystemCoreClockUpdate+0xf0>)
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <SystemCoreClockUpdate+0xf4>)
 800206a:	601a      	str	r2, [r3, #0]
      break;
 800206c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <SystemCoreClockUpdate+0xec>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <SystemCoreClockUpdate+0xfc>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <SystemCoreClockUpdate+0xf0>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <SystemCoreClockUpdate+0xf0>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40023800 	.word	0x40023800
 800209c:	200100e0 	.word	0x200100e0
 80020a0:	00f42400 	.word	0x00f42400
 80020a4:	007a1200 	.word	0x007a1200
 80020a8:	080023b4 	.word	0x080023b4

080020ac <__libc_init_array>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	4d0d      	ldr	r5, [pc, #52]	; (80020e4 <__libc_init_array+0x38>)
 80020b0:	4c0d      	ldr	r4, [pc, #52]	; (80020e8 <__libc_init_array+0x3c>)
 80020b2:	1b64      	subs	r4, r4, r5
 80020b4:	10a4      	asrs	r4, r4, #2
 80020b6:	2600      	movs	r6, #0
 80020b8:	42a6      	cmp	r6, r4
 80020ba:	d109      	bne.n	80020d0 <__libc_init_array+0x24>
 80020bc:	4d0b      	ldr	r5, [pc, #44]	; (80020ec <__libc_init_array+0x40>)
 80020be:	4c0c      	ldr	r4, [pc, #48]	; (80020f0 <__libc_init_array+0x44>)
 80020c0:	f000 f818 	bl	80020f4 <_init>
 80020c4:	1b64      	subs	r4, r4, r5
 80020c6:	10a4      	asrs	r4, r4, #2
 80020c8:	2600      	movs	r6, #0
 80020ca:	42a6      	cmp	r6, r4
 80020cc:	d105      	bne.n	80020da <__libc_init_array+0x2e>
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d4:	4798      	blx	r3
 80020d6:	3601      	adds	r6, #1
 80020d8:	e7ee      	b.n	80020b8 <__libc_init_array+0xc>
 80020da:	f855 3b04 	ldr.w	r3, [r5], #4
 80020de:	4798      	blx	r3
 80020e0:	3601      	adds	r6, #1
 80020e2:	e7f2      	b.n	80020ca <__libc_init_array+0x1e>
 80020e4:	080023c4 	.word	0x080023c4
 80020e8:	080023c4 	.word	0x080023c4
 80020ec:	080023c4 	.word	0x080023c4
 80020f0:	080023c8 	.word	0x080023c8

080020f4 <_init>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr

08002100 <_fini>:
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	bf00      	nop
 8002104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002106:	bc08      	pop	{r3}
 8002108:	469e      	mov	lr, r3
 800210a:	4770      	bx	lr
